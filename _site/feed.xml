<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-29T09:41:44+05:30</updated><id>http://localhost:4000/</id><title type="html">Gogul Ilango</title><subtitle>This blog on Deep Learning, VLSI Design and STA is written by Gogul Ilango. Master VLSI Design, Physical Design, Static Timing Analysis, Deep Learning through my articles, tutorials and resources.</subtitle><entry><title type="html">Python for Hardware Design</title><link href="http://localhost:4000/hardware/python-for-hardware-design" rel="alternate" type="text/html" title="Python for Hardware Design" /><published>2019-05-26T00:00:00+05:30</published><updated>2019-05-26T00:00:00+05:30</updated><id>http://localhost:4000/hardware/python-for-asic-design</id><content type="html" xml:base="http://localhost:4000/hardware/python-for-hardware-design">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
  	&lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#why-python-is-so-popular&quot;&gt;Why Python is so popular?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#how-to-learn-python-for-free&quot;&gt;How to learn Python for free?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#python-for-automation&quot;&gt;Python for Automation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#python-for-text-processing&quot;&gt;Python for Text Processing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#python-for-logic-design&quot;&gt;Python for Logic Design&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#python-for-ml-dl-in-hardware&quot;&gt;Python for ML/DL in Hardware&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_7&quot; href=&quot;#python-for-eda-flow&quot;&gt;Python for EDA flow&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_8&quot; href=&quot;#python-for-web-dashboards&quot;&gt;Python for Web Dashboards&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_9&quot; href=&quot;#conculsion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;objectives&quot;&gt;
&lt;p&gt;I always get questions from my coworkers as well as my readers like the ones below.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Where do I start learning python?&lt;/li&gt; 
	&lt;li&gt;Why/How should a hardware engineer learn python in 2019?&lt;/li&gt; 
	&lt;li&gt;How python could be used to eliminate manual tasks?&lt;/li&gt;
	&lt;li&gt;Why python is preferred over other scripting languages?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;If you check out the link &lt;a href=&quot;https://octoverse.github.com/2017/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, its pretty much obvious that &lt;span class=&quot;coding&quot;&gt;javascript&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;python&lt;/span&gt; leads the programming languages race in 2017. Python has its root in almost any major tech domain such as web development, data analytics, machine learning, deep learning, computer vision, natural language processing, audio processing etc., as shown &lt;a href=&quot;https://gogul09.github.io/software/python-programming&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, what if we use python to design, simulate and implement hardware circuits in silicon? Is it possible to take the amazing advantages that python offer over other hardware related programming languages such as HDL (verilog or vhdl), Tcl, Perl or Shell? Come let’s explore!&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1z2Y6YEAYahJA_7TgcMESLuJIqtsApkal&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;why-python-is-so-popular&quot;&gt;Why Python is so popular?&lt;/h3&gt;

&lt;p&gt;If you are a beginner to the programming world, I would highly suggest you to learn &lt;span class=&quot;coding&quot;&gt;python&lt;/span&gt; first. This is because of the following major reasons.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Python is simple to learn because its very similar to how we humans think.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;More Productive&lt;/strong&gt;: Python is highly productive when compared to other languages such as &lt;span class=&quot;coding&quot;&gt;c&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;c++&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;java&lt;/span&gt; as it is much more readable, concise, expressive and takes lesser time and effort to write code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;One-liners&lt;/strong&gt;: Python has so many one-liners and english-like commands (keywords) that boosts programmers productivity a lot.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Community&lt;/strong&gt;: Python has a very big developer friendly community and its very easy to find python developers around the world in platforms such as GitHub or Stack Overflow.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Libraries&lt;/strong&gt;: Python has rich set of well documented libraries and frameworks for different tech domains as shown &lt;a href=&quot;https://gogul09.github.io/software/python-programming&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open-Source&lt;/strong&gt;: Python ecosystem is so popular because most of the libraries and frameworks available online are open-source (meaning anyone can use it for their development purposes adhering to the licenses provided).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite its advantages, python is much slower compared to languages such as &lt;span class=&quot;coding&quot;&gt;c++&lt;/span&gt;. But wait! It’s not a big disadvantage. You can still use python for most of the tasks that require minimal execution time (not speed-intensive applications such as games). That’s why data-intensive domains such as deep learning libraries use python as a high-level wrapper for a human to code and beneath that wrapper, they use C++ for faster execution.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;how-to-learn-python-for-free&quot;&gt;How to learn python for free?&lt;/h3&gt;

&lt;p&gt;When I started learning python three years back, I used the following resources. I guess, these resources are more than enough to get you comfortable with python.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/domains/python&quot; target=&quot;_blank&quot;&gt;HackerRank&lt;/a&gt; is the best learning platform for python. You have to learn and solve programs based on levels of difficulty. Once you solve programs here, you will get that confidence in using the language for your own purposes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLi01XoE8jYohWFPpC17Z-wWhPOSuh8Er-&quot; target=&quot;_blank&quot;&gt;Learn Python - Socratica&lt;/a&gt; has an excellent playlist full of neatly made python tutorials in YouTube for free. If you love learning by videos, this is the best ever python tutorial playlist out there.&lt;/li&gt;
  &lt;li&gt;Corey Schafer is another awesome YouTube channel that delivers no-bullshit python tutorials.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTt66h8cVpmbayBKlMTuS55y&quot; target=&quot;_blank&quot;&gt;Python - Setting up a Python Environment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTskrapNbzXhwoFUiLCjGgY7&quot; target=&quot;_blank&quot;&gt;Python Programming Beginner Tutorials&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&quot; target=&quot;_blank&quot;&gt;Python Tutorials&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc&quot; target=&quot;_blank&quot;&gt;Python OOP Tutorials&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other than these, you can check out some extensive list of learning resources that I collected for you &lt;a href=&quot;https://gogul09.github.io/software/python-programming&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-automation&quot;&gt;Python for Automation&lt;/h3&gt;

&lt;p&gt;The main use of python lies in automating repeated manual tasks that we perform daily. These manual tasks might include opening a terminal, going to a path, finding some file, parsing some values in that file, putting that parsed value in a csv file and sending a mail with that csv file attached. This is one of the classic examples where you can write a single python script to do all the steps that are mentioned.&lt;/p&gt;

&lt;p&gt;Other examples where python scripts can be used are organizing files in a particular path, manipulating strings, csv files, excel spreadsheets etc., sending email and text messages and much more. &lt;a href=&quot;https://automatetheboringstuff.com/&quot; target=&quot;_blank&quot;&gt;Automate the boring stuff with python&lt;/a&gt; is a great learning resource that you can read on how to do these.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-text-processing&quot;&gt;Python for Text Processing&lt;/h3&gt;

&lt;p&gt;Manipulating text files is a common task in any domain whether you are in VLSI, computer networking, image processing, signal processing etc., Python offers rich set of libraries and modules to do this.&lt;/p&gt;

&lt;p&gt;Some of the most commonly used text processing modules in python using which you can manipulate text files (such as CSV files, JSON files, YAML file, HTML files etc.,), perform shell operations, parse large text files, load/store very large text files and manipulate file formats are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;string&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;os&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;sys&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;re&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;csv&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;json&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;yaml&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;h5py&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;bs4&lt;/span&gt; module&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-logic-design&quot;&gt;Python for Logic Design&lt;/h3&gt;

&lt;p&gt;Ok cool! Now you understood, python could be used to create automation utilities that involve text processing which reduces time involved in solving repeated manual tasks in your day-to-day work life.&lt;/p&gt;

&lt;h4 id=&quot;myhdl&quot;&gt;MyHDL&lt;/h4&gt;

&lt;p&gt;Can python be used in designing hardware circuits which typically need a HDL for writing code? Of course, there is a great open-source python project called &lt;a href=&quot;http://www.myhdl.org/&quot; target=&quot;_blank&quot;&gt;MyHDL&lt;/a&gt; that turns python into a hardware description and verification language, providing hardware engineers with the power of the python ecosystem.&lt;/p&gt;

&lt;p&gt;Moreover, MyHDL designs can be converted to verilog or VHDL automatically and implemented using a standard tool flow. Before getting too much excited about this library, please read &lt;a href=&quot;http://www.myhdl.org/start/whatitisnot.html&quot; target=&quot;_blank&quot;&gt;What MyHDL is not?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out FPGA designs using MyHDL &lt;a href=&quot;https://buildmedia.readthedocs.org/media/pdf/fpga-designs-with-myhdl/latest/fpga-designs-with-myhdl.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. You can check out MyHDL manual &lt;a href=&quot;https://buildmedia.readthedocs.org/media/pdf/myhdl/stable/myhdl.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Also, do read &lt;a href=&quot;https://www.quora.com/How-can-Python-be-used-in-hardware-designing&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; quora answer.&lt;/p&gt;

&lt;h4 id=&quot;pymtl&quot;&gt;PyMTL&lt;/h4&gt;

&lt;p&gt;Another python based hardware modeling framework is &lt;a href=&quot;https://github.com/cornell-brg/pymtl&quot;&gt;PyMTL&lt;/a&gt;. Following links provide training resources on using this library.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csl.cornell.edu/courses/ece4750/handouts/ece4750-tut4-verilog.pdf&quot; target=&quot;_blank&quot;&gt;Verilog Hardware Description Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csl.cornell.edu/courses/ece4750/handouts/ece4750-tut3-pymtl.pdf&quot; target=&quot;_blank&quot;&gt;PyMTL Hardware Modeling Framework Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cornell-ece5745/ece5745-sec-pymtl-cl/blob/master/README.md&quot; target=&quot;_blank&quot;&gt;PyMTL CL Modeling Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cornell-brg/pymtl-tut-hls/blob/master/README.md&quot; target=&quot;_blank&quot;&gt;PyMTL/HLS Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csl.cornell.edu/courses/ece5745/handouts/ece5745-tut-asic-new.pdf&quot; target=&quot;_blank&quot;&gt;PyMTL-Based ASIC Toolflow Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-ml-dl-in-hardware&quot;&gt;Python for ML/DL in Hardware&lt;/h3&gt;

&lt;p&gt;Apart from the hypes that machine learning (ML) and deep learning (DL) have created in the recent years, still VLSI domain isn’t deeply affected by ML or DL. This is because, VLSI industry is so complex because of conflicting goals to optimize hardware designs for timing, power and area with lesser time to market.&lt;/p&gt;

&lt;p&gt;This is definitely the time to use ML or DL in hardware design, particularly creating ML models for smaller tasks in a bigger design flow. I have documented some of the current research papers and articles related to using ML or DL in VLSI chip design &lt;a href=&quot;https://gogul09.github.io/hardware/research-papers-vlsi-ml&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, for a beginner who is interested to use ML or DL in hardware design, below are the python libraries needed to get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scientific Computing Stack&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.numpy.org/&quot; target=&quot;_blank&quot;&gt;NumPy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scipy.org/&quot; target=&quot;_blank&quot;&gt;SciPy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot;&gt;Matplotlib&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://seaborn.pydata.org/&quot; target=&quot;_blank&quot;&gt;Seaborn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/&quot; target=&quot;_blank&quot;&gt;Pandas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://scikit-learn.org/&quot; target=&quot;_blank&quot;&gt;Scikit-learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Deep Learning&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://keras.io/&quot; target=&quot;_blank&quot;&gt;Keras&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-eda&quot;&gt;Python for EDA&lt;/h3&gt;

&lt;p&gt;As far as technology node reduces, the need for electronic design automation tools increases. You can’t design a multi-million instances based design manually. You need EDA tools that helps in implementation.&lt;/p&gt;

&lt;p&gt;One particular python project that I found related to EDA was &lt;a href=&quot;https://pyeda.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot;&gt;PyEDA&lt;/a&gt;. You can watch &lt;a href=&quot;https://www.youtube.com/watch?v=cljDuK0ouRs&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; YouTube video to learn more about this hobby project by &lt;a href=&quot;https://github.com/cjdrake&quot; target=&quot;_blank&quot;&gt;Chris Drake&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-web-dashboards&quot;&gt;Python for Web Dashboards&lt;/h3&gt;

&lt;p&gt;To analyze your design data which has lots of files with millions of lines, you need a simpler way to look at important metrics, reports and status of your design in a nice looking web interface. Python provides cool libraries to create web dashboards that speeds up your productivity as well as reducing your analysis time.&lt;/p&gt;

&lt;p&gt;Using the python libraries given below, and with some HTML, CSS and JavaScript knowledge, you can create beautiful web dashboards to analyze your design data and reduce time to market a lot.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot; target=&quot;_blank&quot;&gt;Flask&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.mongodb.com/python/current/&quot; target=&quot;_blank&quot;&gt;PyMongo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As you can see, &lt;span class=&quot;coding&quot;&gt;python&lt;/span&gt; can be used in multiple areas in hardware design. According to me, python has just started to find its place in hardware design. Also, I feel that it will be used by engineers around the world very soon due to its simpler nature. If you have found anything related to python that could be used for hardware design, please leave that in the comments below. Peace!&lt;/p&gt;</content><author><name>Gogul Ilango</name></author><category term="hardware" /><summary type="html">X Contents Why Python is so popular? How to learn Python for free? Python for Automation Python for Text Processing Python for Logic Design Python for ML/DL in Hardware Python for EDA flow Python for Web Dashboards Conclusion I always get questions from my coworkers as well as my readers like the ones below. Where do I start learning python? Why/How should a hardware engineer learn python in 2019? How python could be used to eliminate manual tasks? Why python is preferred over other scripting languages? If you check out the link here, its pretty much obvious that javascript and python leads the programming languages race in 2017. Python has its root in almost any major tech domain such as web development, data analytics, machine learning, deep learning, computer vision, natural language processing, audio processing etc., as shown here. But, what if we use python to design, simulate and implement hardware circuits in silicon? Is it possible to take the amazing advantages that python offer over other hardware related programming languages such as HDL (verilog or vhdl), Tcl, Perl or Shell? Come let’s explore! Why Python is so popular? If you are a beginner to the programming world, I would highly suggest you to learn python first. This is because of the following major reasons. Simple: Python is simple to learn because its very similar to how we humans think. More Productive: Python is highly productive when compared to other languages such as c, c++ or java as it is much more readable, concise, expressive and takes lesser time and effort to write code. One-liners: Python has so many one-liners and english-like commands (keywords) that boosts programmers productivity a lot. Community: Python has a very big developer friendly community and its very easy to find python developers around the world in platforms such as GitHub or Stack Overflow. Libraries: Python has rich set of well documented libraries and frameworks for different tech domains as shown here. Open-Source: Python ecosystem is so popular because most of the libraries and frameworks available online are open-source (meaning anyone can use it for their development purposes adhering to the licenses provided). Despite its advantages, python is much slower compared to languages such as c++. But wait! It’s not a big disadvantage. You can still use python for most of the tasks that require minimal execution time (not speed-intensive applications such as games). That’s why data-intensive domains such as deep learning libraries use python as a high-level wrapper for a human to code and beneath that wrapper, they use C++ for faster execution. How to learn python for free? When I started learning python three years back, I used the following resources. I guess, these resources are more than enough to get you comfortable with python. HackerRank is the best learning platform for python. You have to learn and solve programs based on levels of difficulty. Once you solve programs here, you will get that confidence in using the language for your own purposes. Learn Python - Socratica has an excellent playlist full of neatly made python tutorials in YouTube for free. If you love learning by videos, this is the best ever python tutorial playlist out there. Corey Schafer is another awesome YouTube channel that delivers no-bullshit python tutorials. Python - Setting up a Python Environment Python Programming Beginner Tutorials Python Tutorials Python OOP Tutorials Other than these, you can check out some extensive list of learning resources that I collected for you here. Python for Automation The main use of python lies in automating repeated manual tasks that we perform daily. These manual tasks might include opening a terminal, going to a path, finding some file, parsing some values in that file, putting that parsed value in a csv file and sending a mail with that csv file attached. This is one of the classic examples where you can write a single python script to do all the steps that are mentioned. Other examples where python scripts can be used are organizing files in a particular path, manipulating strings, csv files, excel spreadsheets etc., sending email and text messages and much more. Automate the boring stuff with python is a great learning resource that you can read on how to do these. Python for Text Processing Manipulating text files is a common task in any domain whether you are in VLSI, computer networking, image processing, signal processing etc., Python offers rich set of libraries and modules to do this. Some of the most commonly used text processing modules in python using which you can manipulate text files (such as CSV files, JSON files, YAML file, HTML files etc.,), perform shell operations, parse large text files, load/store very large text files and manipulate file formats are string module os module sys module re module csv module json module yaml module h5py module bs4 module Python for Logic Design Ok cool! Now you understood, python could be used to create automation utilities that involve text processing which reduces time involved in solving repeated manual tasks in your day-to-day work life. MyHDL Can python be used in designing hardware circuits which typically need a HDL for writing code? Of course, there is a great open-source python project called MyHDL that turns python into a hardware description and verification language, providing hardware engineers with the power of the python ecosystem. Moreover, MyHDL designs can be converted to verilog or VHDL automatically and implemented using a standard tool flow. Before getting too much excited about this library, please read What MyHDL is not? You can check out FPGA designs using MyHDL here. You can check out MyHDL manual here. Also, do read this quora answer. PyMTL Another python based hardware modeling framework is PyMTL. Following links provide training resources on using this library. Verilog Hardware Description Language PyMTL Hardware Modeling Framework Tutorial PyMTL CL Modeling Tutorial PyMTL/HLS Tutorial PyMTL-Based ASIC Toolflow Tutorial Python for ML/DL in Hardware Apart from the hypes that machine learning (ML) and deep learning (DL) have created in the recent years, still VLSI domain isn’t deeply affected by ML or DL. This is because, VLSI industry is so complex because of conflicting goals to optimize hardware designs for timing, power and area with lesser time to market. This is definitely the time to use ML or DL in hardware design, particularly creating ML models for smaller tasks in a bigger design flow. I have documented some of the current research papers and articles related to using ML or DL in VLSI chip design here. But, for a beginner who is interested to use ML or DL in hardware design, below are the python libraries needed to get started. Scientific Computing Stack NumPy SciPy Matplotlib Seaborn Pandas Machine Learning Scikit-learn Deep Learning Keras TensorFlow Python for EDA As far as technology node reduces, the need for electronic design automation tools increases. You can’t design a multi-million instances based design manually. You need EDA tools that helps in implementation. One particular python project that I found related to EDA was PyEDA. You can watch this YouTube video to learn more about this hobby project by Chris Drake. Python for Web Dashboards To analyze your design data which has lots of files with millions of lines, you need a simpler way to look at important metrics, reports and status of your design in a nice looking web interface. Python provides cool libraries to create web dashboards that speeds up your productivity as well as reducing your analysis time. Using the python libraries given below, and with some HTML, CSS and JavaScript knowledge, you can create beautiful web dashboards to analyze your design data and reduce time to market a lot. Django Flask PyMongo Conclusion As you can see, python can be used in multiple areas in hardware design. According to me, python has just started to find its place in hardware design. Also, I feel that it will be used by engineers around the world very soon due to its simpler nature. If you have found anything related to python that could be used for hardware design, please leave that in the comments below. Peace!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1XZNZ6xPx0UUCbnncmz_GBWpX7xhHJ6lo" /></entry><entry><title type="html">How to create custom tables in HTML?</title><link href="http://localhost:4000/software/how-to-create-custom-tables-in-html" rel="alternate" type="text/html" title="How to create custom tables in HTML?" /><published>2019-05-14T00:00:00+05:30</published><updated>2019-05-14T00:00:00+05:30</updated><id>http://localhost:4000/software/how-to-create-custom-tables-in-html</id><content type="html" xml:base="http://localhost:4000/software/how-to-create-custom-tables-in-html">&lt;p&gt;I always wondered is there a way to create tables like the one shown below without using nested tables (i.e., table inside a table by hacking &lt;span class=&quot;coding&quot;&gt;border&lt;/span&gt; property in CSS).&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Gender&lt;/td&gt;
    &lt;td colspan=&quot;2&quot;&gt;Average&lt;/td&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Red Eyes&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Height&lt;/td&gt;
    &lt;td&gt;Weight&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Males&lt;/td&gt;
    &lt;td&gt;165&lt;/td&gt;
    &lt;td&gt;65&lt;/td&gt;
    &lt;td&gt;30%&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Females&lt;/td&gt;
    &lt;td&gt;150&lt;/td&gt;
    &lt;td&gt;50&lt;/td&gt;
    &lt;td&gt;45%&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;If you want to create the above table using nested tables concept, you would give up on the &lt;span class=&quot;coding&quot;&gt;width&lt;/span&gt; of your table’s &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements. Based on your &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; content, the &lt;span class=&quot;coding&quot;&gt;width&lt;/span&gt; property will vary, and eventually you mess up with the borders and finally, you have a messy table with misaligned borders!&lt;/p&gt;

&lt;p&gt;One hack is to use a fixed width for your &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements and fill up the content based on that with &lt;span class=&quot;coding&quot;&gt;overflow: auto&lt;/span&gt; enabled in CSS. But, that’s not the best solution to this problem.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To solve this problem, we need to preserve the &lt;span class=&quot;coding&quot;&gt;width&lt;/span&gt; of the &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements somehow. And the best solution is to take a pen and paper!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Draw the table that you expect using a pen and paper to clearly understand the layout that you’re going to code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After figuring out the layout, use &lt;span class=&quot;coding&quot;&gt;rowspan&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;colspan&lt;/span&gt; attributes for your &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements to bring that customized table (without any nested tables concept). It’s that simple 😊&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can look at the below code and output to understand &lt;span class=&quot;coding&quot;&gt;rowspan&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;colspan&lt;/span&gt; better.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;index.html&lt;span&gt;code&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Country&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Region&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Product&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Profit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;India&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Western&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Monitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Desk Lamp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;20&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Central&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Monitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Desk Lamp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Eastern&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Monitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;31&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Desk Lamp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;17&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;3&quot;&gt;Country&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Region&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Product&lt;/td&gt;
    &lt;td&gt;Profit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;6&quot;&gt;India&lt;/td&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Western&lt;/td&gt;
    &lt;td&gt;Monitor&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Desk Lamp&lt;/td&gt;
    &lt;td&gt;20&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Central&lt;/td&gt;
    &lt;td&gt;Monitor&lt;/td&gt;
    &lt;td&gt;30&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Desk Lamp&lt;/td&gt;
    &lt;td&gt;25&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Eastern&lt;/td&gt;
    &lt;td&gt;Monitor&lt;/td&gt;
    &lt;td&gt;31&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Desk Lamp&lt;/td&gt;
    &lt;td&gt;17&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">I always wondered is there a way to create tables like the one shown below without using nested tables (i.e., table inside a table by hacking border property in CSS). Gender Average Red Eyes Height Weight Males 165 65 30% Females 150 50 45% If you want to create the above table using nested tables concept, you would give up on the width of your table’s td elements. Based on your td content, the width property will vary, and eventually you mess up with the borders and finally, you have a messy table with misaligned borders! One hack is to use a fixed width for your td elements and fill up the content based on that with overflow: auto enabled in CSS. But, that’s not the best solution to this problem. To solve this problem, we need to preserve the width of the td elements somehow. And the best solution is to take a pen and paper! Draw the table that you expect using a pen and paper to clearly understand the layout that you’re going to code. After figuring out the layout, use rowspan and colspan attributes for your td elements to bring that customized table (without any nested tables concept). It’s that simple 😊 You can look at the below code and output to understand rowspan and colspan better. index.htmlcode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40&amp;lt;table&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;3&quot;&amp;gt;Country&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Region&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Product&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Profit&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;6&quot;&amp;gt;India&amp;lt;/td&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Western&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Monitor&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;10&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Desk Lamp&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Central&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Monitor&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;30&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Desk Lamp&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;25&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Eastern&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Monitor&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;31&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Desk Lamp&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;17&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; Country Region Product Profit India Western Monitor 10 Desk Lamp 20 Central Monitor 30 Desk Lamp 25 Eastern Monitor 31 Desk Lamp 17</summary></entry><entry><title type="html">My First International Trip to Singapore</title><link href="http://localhost:4000/random/my-first-international-trip-to-singapore" rel="alternate" type="text/html" title="My First International Trip to Singapore" /><published>2019-05-01T00:00:00+05:30</published><updated>2019-05-01T00:00:00+05:30</updated><id>http://localhost:4000/random/my-first-international-trip-to-singapore</id><content type="html" xml:base="http://localhost:4000/random/my-first-international-trip-to-singapore">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#flight-expenses&quot;&gt;Flight Expenses&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#experience-singapore&quot;&gt;Experience Singapore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#places-that-i-visited&quot;&gt;Places that I visited&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#places-that-i-missed&quot;&gt;Places that I missed&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#my-photography-toolkit&quot;&gt;My Photography Toolkit&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Being an Indian, this was my first ever international travel to another country. I never traveled alone so far in my life. But, this 10-day trip to Singapore was an unforgettable experience in my life.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is my first ever travelogue in this website. So, please pardon me if you find my writing vague. You’re cute!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this travelogue, I will discuss about the overall expenses incurred for this 10-day trip, places I visited, places I missed, my photography toolkit and about the amazing Singapore city in general.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;flight-expenses&quot;&gt;Flight Expenses&lt;/h3&gt;
&lt;p&gt;I planned and booked tickets well before four months of my journey. I chose &lt;a href=&quot;https://www.goindigo.in/&quot; target=&quot;_blank&quot;&gt;INDIGO&lt;/a&gt; flights as I have traveled before (domestic) and also, I’m a happy INDIGO customer. Below are the expenses incurred for departure and arrival of my travel.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Chennai to Singapore (17 April 2019) - INR 7,699 (Economy)&lt;/li&gt;
  &lt;li&gt;Singapore to Chennai (28 April 2019) - INR 10,725 (Economy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These do not include any meal and I wasn’t choosy about my seat number either. If you need these, then your fare amount increases as per your liking.&lt;/p&gt;

&lt;p&gt;Things you need to carry during these flight travel are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Your Passport (must)&lt;/li&gt;
  &lt;li&gt;Your Visa to Singapore (must)&lt;/li&gt;
  &lt;li&gt;Any of your Identity Card (not mandatory, but good to keep)&lt;/li&gt;
  &lt;li&gt;A black pen (as you will be filling immigration form at Singapore; hence, good to keep a pen with you)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Documents you need to get Singapore Visa are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Your Passport&lt;/li&gt;
  &lt;li&gt;Bank payslips for past 3 months&lt;/li&gt;
  &lt;li&gt;Bank statement for past 90 days&lt;/li&gt;
  &lt;li&gt;Passport of someone you know in Singapore&lt;/li&gt;
  &lt;li&gt;V39A form from someone you know in Singapore&lt;/li&gt;
  &lt;li&gt;Office ID card&lt;/li&gt;
  &lt;li&gt;Minimum Bank Balance (INR 80,000)&lt;/li&gt;
  &lt;li&gt;Passport Size Photo of You (Singapore specific)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;experience-singapore&quot;&gt;Experience Singapore&lt;/h3&gt;

&lt;p&gt;I literally had no words to express when I looked out the small rectangular window in my flight at 4.30 AM when I reached Singapore. If you travel in a flight during night to Singapore, you will be seeing a land that has colorful stars fallen from the sky which reflects the comely architecture of this country.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jewelchangiairport.com/&quot; target=&quot;_blank&quot;&gt;Changi International Airport&lt;/a&gt; which welcomes you is a stunning architectural marvel where you will find numerous shopping centers, dinings, the world famous &lt;a href=&quot;https://www.youtube.com/watch?v=4YcrLLEtdkc&quot; target=&quot;_blank&quot;&gt;Jewel&lt;/a&gt; and much more that reflects the country’s modern as well as natural beauty.&lt;/p&gt;

&lt;p&gt;I was fortunate enough to walk around some beautiful natural trails around the country where I experienced a divine feeling, fresh oxygen and pure drinking water that comes out of the taps. In contrast to the lush gardens, forests and woods, Singapore has lots of impressive shopping malls, astoundingly amazing sky-kissing buildings and many popular tourist places that will make you think that you have landed on a futuristic world.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;places-that-i-visited&quot;&gt;Places that I visited&lt;/h3&gt;

&lt;p&gt;You can know a lot about all those stunning places and neighbourhoods at Singapore &lt;a href=&quot;https://www.visitsingapore.com/en_in/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Nevertheless, I will list down all those breathtaking places that I visited at Singapore.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Singapore Merlion&lt;/li&gt;
  &lt;li&gt;Marina Bay Sands&lt;/li&gt;
  &lt;li&gt;Gardens by the Bay&lt;/li&gt;
  &lt;li&gt;Singapore Zoo&lt;/li&gt;
  &lt;li&gt;Windsor Nature Park&lt;/li&gt;
  &lt;li&gt;Woodlands Waterfront&lt;/li&gt;
  &lt;li&gt;Lower Peirce Reservoir&lt;/li&gt;
  &lt;li&gt;Sungei Buloh Wetland Reserve&lt;/li&gt;
  &lt;li&gt;Orchard Road&lt;/li&gt;
  &lt;li&gt;Takashimaya&lt;/li&gt;
  &lt;li&gt;Harbourfront (VivoCity)&lt;/li&gt;
  &lt;li&gt;Little India&lt;/li&gt;
  &lt;li&gt;Mustafa Centre&lt;/li&gt;
  &lt;li&gt;Jurong Point Boon Lay&lt;/li&gt;
  &lt;li&gt;Sentosa
    &lt;ul&gt;
      &lt;li&gt;Tanjong Beach&lt;/li&gt;
      &lt;li&gt;Palawan Beach&lt;/li&gt;
      &lt;li&gt;S.E.A Aquarium&lt;/li&gt;
      &lt;li&gt;Maritime Experimental Museum&lt;/li&gt;
      &lt;li&gt;Skyline Luge &amp;amp; Skyride&lt;/li&gt;
      &lt;li&gt;Sentosa Merlion&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each place listed above has different feel and ambience attached to it. To visit all these places, one can easily use Singapore’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Mass_Rapid_Transit_(Singapore)&quot; target=&quot;_blank&quot;&gt;MRT&lt;/a&gt; (Mass Rapid Transit) or &lt;a href=&quot;https://en.wikipedia.org/wiki/Light_Rail_Transit_(Singapore)&quot; target=&quot;_blank&quot;&gt;LRT&lt;/a&gt; (Light Rail Transit). It is cheap to go from one location to another inside Singapore if you understand it’s MRT/LRT map shown below. Only the first ride in an MRT/LRT will be anxious. After your first ride, you will understand how simple it is to move around the city using this cool commute system.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1SLdxEURv0BxHEl9PvMrIjDH5GvzZdUVI&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Some of the android apps that helped me move around Singapore are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=streetdirectory.mobile&amp;amp;hl=en&quot; target=&quot;_blank&quot;&gt;Singapore Map&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=originally.us.buses&amp;amp;hl=en&quot; target=&quot;_blank&quot;&gt;SG BusLeh: Award Winning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a nature lover (peace lover) like me, Singapore has got numerous breathtaking trails where you can get fresh oxygen (if you love walking or running) as well as capture beautiful pictures. You will fall in love again and again with nature’s beauty while walking along those amazing natural trails. Some of the natural trails that I walked are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Windsor Nature Park&lt;/li&gt;
  &lt;li&gt;Sungei Buloh Wetland Reserve&lt;/li&gt;
  &lt;li&gt;Lower Peirce Reservoir&lt;/li&gt;
  &lt;li&gt;Singapore Zoo&lt;/li&gt;
  &lt;li&gt;Woodlands Waterfront&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the clicks that I have captured at Singapore are shown below. You can also visit my &lt;a href=&quot;https://gogul09.github.io/photography/&quot; target=&quot;_blank&quot;&gt;photography&lt;/a&gt; page to see more such clicks of mine.&lt;/p&gt;

&lt;figure class=&quot;black-figcaption&quot;&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=15sAzInvyqi5hV0noFPOvopwpbN_d0wTL&quot; /&gt;
  &lt;figcaption&gt;Singapore - Marina Bay Sands &amp;amp; Gardens by the Bay&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;black-figcaption&quot;&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=10E1G7xcLq64IehM57ajGumivJUYqEY5k&quot; /&gt;
  &lt;figcaption&gt;Singapore - Flyer&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;black-figcaption&quot;&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1xDNWI0svCZbbBuAx2xNx6r0psmARuQkY&quot; /&gt;
  &lt;figcaption&gt;Singapore - Sentosa Universal Studios&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;black-figcaption&quot;&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1katmWLNXsapHPukgFXox6zw_TDIVs03S&quot; /&gt;
  &lt;figcaption&gt;Singapore - Sentosa S.E.A Aquarium&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;black-figcaption&quot;&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=183X2iR92fusrudm_6ReOb93Q9YpSOKO2&quot; /&gt;
  &lt;figcaption&gt;Singapore - Sungei Buloh Wetland Reserve&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;black-figcaption&quot;&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1zydehMd9arcX7mi-pw4qkiUB4oqucesc&quot; /&gt;
  &lt;figcaption&gt;Singapore - Zoo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;places-that-i-missed&quot;&gt;Places that I missed&lt;/h3&gt;

&lt;p&gt;Due to time constraints, I was not able to visit some places at Singapore. But, I hope to see these places during my next visit.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hort Park&lt;/li&gt;
  &lt;li&gt;Henderson Waves&lt;/li&gt;
  &lt;li&gt;National University of Singapore&lt;/li&gt;
  &lt;li&gt;Nanyang Technological University&lt;/li&gt;
  &lt;li&gt;Chinatown&lt;/li&gt;
  &lt;li&gt;Botanic Gardens&lt;/li&gt;
  &lt;li&gt;Pulau Ubin&lt;/li&gt;
  &lt;li&gt;Night Safari&lt;/li&gt;
  &lt;li&gt;River Safari&lt;/li&gt;
  &lt;li&gt;Universal Studios&lt;/li&gt;
  &lt;li&gt;Buddha Tooth Relic Temple&lt;/li&gt;
  &lt;li&gt;Clarke Quay&lt;/li&gt;
  &lt;li&gt;Jurong Bird Park&lt;/li&gt;
  &lt;li&gt;Kusu Island&lt;/li&gt;
  &lt;li&gt;F1 Track&lt;/li&gt;
  &lt;li&gt;Butterfly Park And Insect Kingdom&lt;/li&gt;
  &lt;li&gt;Siloso Beach&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;my-photography-toolkit&quot;&gt;My Photography Toolkit&lt;/h3&gt;

&lt;p&gt;If you love photography like me, Singapore has got numerous photographic locations in this planet. It is rich in dense forests with neat trails at day and rich in beautiful lights and colors shining throughout the country at night. My photography toolkit comprises the below stuff.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Canon EOS 700D&lt;/li&gt;
  &lt;li&gt;Canon EF-S55-250mm f/4-5.6 IS STM lens&lt;/li&gt;
  &lt;li&gt;Canon EF50mm F/1.8 STM lens&lt;/li&gt;
  &lt;li&gt;Canon EF-S 18–55mm lens&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are planning to visit Singapore Zoo or Night Safari or River Safari, make sure you carry a telephoto zoom lens such as &lt;a href=&quot;https://www.amazon.in/EF-S-55-250mm-f-4-5-6-STM/dp/B00EP71ETU&quot; target=&quot;_blank&quot;&gt;Canon EF-S55-250mm f/4-5.6 IS STM lens&lt;/a&gt; with you.&lt;/p&gt;

&lt;figure class=&quot;black-figcaption&quot;&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1mnGI4RzzzQHeaMaSlOh4Ch9LzCqGv65K&quot; /&gt;
  &lt;figcaption&gt;Singapore - Near Durian Building&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tourmyindia.com/blog/top-must-visit-attractions-singapore/&quot; target=&quot;_blank&quot;&gt;Top 15 Must-Visit Attractions in Singapore 2019&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.singapore-guide.com/attractions/10mustsee.htm&quot; target=&quot;_blank&quot;&gt;18 Best Things to Do in Singapore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-are-the-must-see-places-in-Singapore&quot; target=&quot;_blank&quot;&gt;What are the must-see places in Singapore?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://traveltriangle.com/blog/singapore-tourist-attractions/&quot; target=&quot;_blank&quot;&gt;47 Remarkable Places To Visit In Singapore In 2019 Where A Wandering Heart Finds Peace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gogul Ilango</name></author><category term="random" /><summary type="html">X Contents Flight Expenses Experience Singapore Places that I visited Places that I missed My Photography Toolkit References Being an Indian, this was my first ever international travel to another country. I never traveled alone so far in my life. But, this 10-day trip to Singapore was an unforgettable experience in my life. This is my first ever travelogue in this website. So, please pardon me if you find my writing vague. You’re cute! In this travelogue, I will discuss about the overall expenses incurred for this 10-day trip, places I visited, places I missed, my photography toolkit and about the amazing Singapore city in general. Flight Expenses I planned and booked tickets well before four months of my journey. I chose INDIGO flights as I have traveled before (domestic) and also, I’m a happy INDIGO customer. Below are the expenses incurred for departure and arrival of my travel. Chennai to Singapore (17 April 2019) - INR 7,699 (Economy) Singapore to Chennai (28 April 2019) - INR 10,725 (Economy) These do not include any meal and I wasn’t choosy about my seat number either. If you need these, then your fare amount increases as per your liking. Things you need to carry during these flight travel are Your Passport (must) Your Visa to Singapore (must) Any of your Identity Card (not mandatory, but good to keep) A black pen (as you will be filling immigration form at Singapore; hence, good to keep a pen with you) Documents you need to get Singapore Visa are Your Passport Bank payslips for past 3 months Bank statement for past 90 days Passport of someone you know in Singapore V39A form from someone you know in Singapore Office ID card Minimum Bank Balance (INR 80,000) Passport Size Photo of You (Singapore specific) Experience Singapore I literally had no words to express when I looked out the small rectangular window in my flight at 4.30 AM when I reached Singapore. If you travel in a flight during night to Singapore, you will be seeing a land that has colorful stars fallen from the sky which reflects the comely architecture of this country. Changi International Airport which welcomes you is a stunning architectural marvel where you will find numerous shopping centers, dinings, the world famous Jewel and much more that reflects the country’s modern as well as natural beauty. I was fortunate enough to walk around some beautiful natural trails around the country where I experienced a divine feeling, fresh oxygen and pure drinking water that comes out of the taps. In contrast to the lush gardens, forests and woods, Singapore has lots of impressive shopping malls, astoundingly amazing sky-kissing buildings and many popular tourist places that will make you think that you have landed on a futuristic world. Places that I visited You can know a lot about all those stunning places and neighbourhoods at Singapore here. Nevertheless, I will list down all those breathtaking places that I visited at Singapore. Singapore Merlion Marina Bay Sands Gardens by the Bay Singapore Zoo Windsor Nature Park Woodlands Waterfront Lower Peirce Reservoir Sungei Buloh Wetland Reserve Orchard Road Takashimaya Harbourfront (VivoCity) Little India Mustafa Centre Jurong Point Boon Lay Sentosa Tanjong Beach Palawan Beach S.E.A Aquarium Maritime Experimental Museum Skyline Luge &amp;amp; Skyride Sentosa Merlion Each place listed above has different feel and ambience attached to it. To visit all these places, one can easily use Singapore’s MRT (Mass Rapid Transit) or LRT (Light Rail Transit). It is cheap to go from one location to another inside Singapore if you understand it’s MRT/LRT map shown below. Only the first ride in an MRT/LRT will be anxious. After your first ride, you will understand how simple it is to move around the city using this cool commute system. Some of the android apps that helped me move around Singapore are Singapore Map SG BusLeh: Award Winning If you are a nature lover (peace lover) like me, Singapore has got numerous breathtaking trails where you can get fresh oxygen (if you love walking or running) as well as capture beautiful pictures. You will fall in love again and again with nature’s beauty while walking along those amazing natural trails. Some of the natural trails that I walked are Windsor Nature Park Sungei Buloh Wetland Reserve Lower Peirce Reservoir Singapore Zoo Woodlands Waterfront Some of the clicks that I have captured at Singapore are shown below. You can also visit my photography page to see more such clicks of mine. Singapore - Marina Bay Sands &amp;amp; Gardens by the Bay Singapore - Flyer Singapore - Sentosa Universal Studios Singapore - Sentosa S.E.A Aquarium Singapore - Sungei Buloh Wetland Reserve Singapore - Zoo Places that I missed Due to time constraints, I was not able to visit some places at Singapore. But, I hope to see these places during my next visit. Hort Park Henderson Waves National University of Singapore Nanyang Technological University Chinatown Botanic Gardens Pulau Ubin Night Safari River Safari Universal Studios Buddha Tooth Relic Temple Clarke Quay Jurong Bird Park Kusu Island F1 Track Butterfly Park And Insect Kingdom Siloso Beach My Photography Toolkit If you love photography like me, Singapore has got numerous photographic locations in this planet. It is rich in dense forests with neat trails at day and rich in beautiful lights and colors shining throughout the country at night. My photography toolkit comprises the below stuff. Canon EOS 700D Canon EF-S55-250mm f/4-5.6 IS STM lens Canon EF50mm F/1.8 STM lens Canon EF-S 18–55mm lens If you are planning to visit Singapore Zoo or Night Safari or River Safari, make sure you carry a telephoto zoom lens such as Canon EF-S55-250mm f/4-5.6 IS STM lens with you. Singapore - Near Durian Building References Top 15 Must-Visit Attractions in Singapore 2019 18 Best Things to Do in Singapore What are the must-see places in Singapore? 47 Remarkable Places To Visit In Singapore In 2019 Where A Wandering Heart Finds Peace</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=15sAzInvyqi5hV0noFPOvopwpbN_d0wTL" /></entry><entry><title type="html">C Shell Scripting Learning Notes</title><link href="http://localhost:4000/software/c-shell-scripting-learning-notes" rel="alternate" type="text/html" title="C Shell Scripting Learning Notes" /><published>2019-04-14T00:00:00+05:30</published><updated>2019-04-14T00:00:00+05:30</updated><id>http://localhost:4000/software/c-shell-scripting-learning-notes</id><content type="html" xml:base="http://localhost:4000/software/c-shell-scripting-learning-notes">&lt;div id=&quot;awesomeSideNav&quot; class=&quot;sidenav&quot;&gt;
    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;closebtn&quot; onclick=&quot;closeSideNav()&quot;&gt;&amp;times;&lt;/a&gt;
    &lt;h3&gt;&lt;a href=&quot;#basics&quot;&gt;Basics&lt;/a&gt;&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#expressions&quot;&gt;Expressions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#control-structures&quot;&gt;Control Structures&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#loops&quot;&gt;Loops&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#break&quot;&gt;break&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#continue&quot;&gt;continue&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#goto&quot;&gt;goto&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#interrupt-handling&quot;&gt;Interrupt Handling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;&lt;a href=&quot;#how-tos&quot;&gt;How to's&lt;/a&gt;&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#how-to-store-the-output-of-a-command&quot;&gt;How to store the output of a command?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#how-to-read-user-input&quot;&gt;How to read user input?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#how-to-use-single-and-double-quotes&quot;&gt;How to use single and double quotes?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#how-tos&quot;&gt;How To's&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;In this page, you will find the &lt;strong&gt;syntax&lt;/strong&gt; and &lt;strong&gt;most common how to’s&lt;/strong&gt; of C Shell Scripting. This might be useful for beginners in programming or professionals in automation industries such as VLSI or Telecomm to find &lt;span class=&quot;coding&quot;&gt;csh&lt;/span&gt; syntax and code quickly using this single page online reference material. Click on any of the contents in the sidebar to view the code.&lt;/p&gt;

&lt;h3 class=&quot;centered-heading&quot; id=&quot;basics&quot;&gt;&lt;span&gt;Basics&lt;/span&gt;&lt;/h3&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;expressions&quot;&gt;Expressions&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/csh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# declaring variables&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6

&lt;span class=&quot;c&quot;&gt;# math operations (white space must taken care)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;+&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 2+6&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# add&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; + &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 8&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# subtract&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; - &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 4&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# divide&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; / &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 12&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# remainder&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; % &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;control-structures&quot;&gt;Control Structures&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# check if file exist&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-e filename&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;File exist&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# file status expressions&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# d - file is a directory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# e - file exists&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# f - file is an ordinary file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# o - user owns the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# r - user has read access to the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# w - user has write access to the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# x - user has execute access to the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# z - file is zero bytes long&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if/then/else&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &amp;gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is greater than b&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &amp;lt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is lesser than b&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is equal to b&quot;&lt;/span&gt;
endif

&lt;span class=&quot;c&quot;&gt;# prints &quot;a is lesser than b&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;loops&quot;&gt;loops&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# foreach loop&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# declare a word list&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;colors &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;white red black green blue&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# iterate over the word list (paranthesis is important)&lt;/span&gt;
foreach c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# while loop&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &amp;lt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    @ a++
end

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;break&quot;&gt;break&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 &amp;gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    @ a++
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break
&lt;/span&gt;end
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;breaked from while loop after a is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# breaked from while loop after a is 4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;continue&quot;&gt;continue&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;colors &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;white red black green blue&quot;&lt;/span&gt;
foreach c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; black&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;as color is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, continuing..&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue
    &lt;/span&gt;endif
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;color is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is white&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is red&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# as color is black, continuing..&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is green&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is blue&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;goto&quot;&gt;goto&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 20

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;goto csk
&lt;span class=&quot;k&quot;&gt;else if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;goto rcb
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;goto kkr

csk:
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is csk&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

rcb:
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is rcb&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

kkr:
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is kkr&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

&lt;span class=&quot;c&quot;&gt;# prints &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is rcb&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;switch&quot;&gt;switch&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$#argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No arguments provided..&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;switch&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;yY][eE][sS]:
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Input is YES&quot;&lt;/span&gt;
        breaksw
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nN][oO]:
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Input is NO&quot;&lt;/span&gt;
    default:
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Input is not YES/NO&quot;&lt;/span&gt;
        breaksw
    endsw
endif

&lt;span class=&quot;c&quot;&gt;# source test.csh yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# print &quot;Input is YES&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;interrupt-handling&quot;&gt;Interrupt Handling&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# used to transfer control to onintr statement once CTRL+C is done to kill the script.&lt;/span&gt;
onintr close
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 &amp;gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Loading avengers....&quot;&lt;/span&gt;
    sleep 2
end

close:
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Avengers killed..&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yet Ironman is safe!&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;centered-heading&quot; id=&quot;how-tos&quot;&gt;&lt;span&gt;How to's&lt;/span&gt;&lt;/h3&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-store-the-output-of-a-command&quot;&gt;How to store the output of a command?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# backquotes is used to store command's output to a variable for further processing&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints /usr2/gilango/study&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Sun Apr 14 13:45:25 IST 2019&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] &lt;span class=&quot;c&quot;&gt;# Sun &lt;/span&gt;

foreach f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Sun&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Apr&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 14&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 13:45:25&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# IST&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2019&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-read-user-input&quot;&gt;How to read user input?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# two ways to read user input&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# method 1: set a = $&amp;lt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;Input a value for a: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You entered a as: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Input a value for a: 9&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You entered a as: 9&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# method 2: set a = `head -1`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;Input a value for a: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;head -1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You entered a as: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Input a value for a: 21&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You entered a as: 21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-use-single-and-double-quotes&quot;&gt;How to use single and double quotes?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# single quotes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow inclusion of spaces&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * prevent variable substitution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow filename generation&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# double quotes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow inclusion of spaces&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow variable substitution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow filename generation&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -l
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ls $a'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints ls $a&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ls &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints ls -l&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">&amp;times; Basics Expressions Control Structures Loops break continue goto switch Interrupt Handling How to's How to store the output of a command? How to read user input? How to use single and double quotes? X Contents Basics How To's In this page, you will find the syntax and most common how to’s of C Shell Scripting. This might be useful for beginners in programming or professionals in automation industries such as VLSI or Telecomm to find csh syntax and code quickly using this single page online reference material. Click on any of the contents in the sidebar to view the code. Basics Expressionscode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25#!/bin/csh # declaring variables set a = 2 set b = 6 # math operations (white space must taken care) set c = `expr $a+$b` echo $c # prints 2+6 # add set c = `expr $a + $b` echo $c # prints 8 # subtract set c = `expr $b - $a` echo $c # prints 4 # divide set c = `expr $b / $a` echo $c # prints 12 # remainder set c = `expr $b % $a` echo $c # prints 12 Control Structurescode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28# check if file exist if (-e filename) echo &quot;File exist&quot; #------------------------- # file status expressions #------------------------- # d - file is a directory # e - file exists # f - file is an ordinary file # o - user owns the file # r - user has read access to the file # w - user has write access to the file # x - user has execute access to the file # z - file is zero bytes long # if/then/else set a = 5 set b = 10 if ($a &amp;gt; $b) then echo &quot;a is greater than b&quot; else if ($a &amp;lt; $b) then echo &quot;a is lesser than b&quot; else echo &quot;a is equal to b&quot; endif # prints &quot;a is lesser than b&quot; loopscode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25#---------------- # foreach loop #---------------- # declare a word list set colors = &quot;white red black green blue&quot; # iterate over the word list (paranthesis is important) foreach c ($colors) echo $c end #---------------- # while loop #---------------- set a = 0 while ($a &amp;lt; 4) echo &quot;a is $a&quot; @ a++ end # prints # a is 0 # a is 1 # a is 2 # a is 3 breakcode 1 2 3 4 5 6 7 8 9 10 11 12 13set a = 0 while (1 &amp;gt; 0) echo &quot;a is $a&quot; @ a++ if ($a == 4) break end echo &quot;breaked from while loop after a is $a&quot; # prints # a is 1 # a is 2 # a is 3 # breaked from while loop after a is 4 continuecode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15set colors = &quot;white red black green blue&quot; foreach c ($colors) if ($c == black) then echo &quot;as color is $c, continuing..&quot; continue endif echo &quot;color is $c&quot; end # prints # color is white # color is red # as color is black, continuing.. # color is green # color is blue gotocode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23set a = 20 if ($a == 10) then goto csk else if ($a == 20) then goto rcb else goto kkr csk: echo &quot;this is csk&quot; exit 1 rcb: echo &quot;this is rcb&quot; exit 1 kkr: echo &quot;this is kkr&quot; exit 1 # prints # this is rcb switchcode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18if ($#argv == 0) then echo &quot;No arguments provided..&quot; exit 1 else switch($argv[1]) case [yY][eE][sS]: echo &quot;Input is YES&quot; breaksw case [nN][oO]: echo &quot;Input is NO&quot; default: echo &quot;Input is not YES/NO&quot; breaksw endsw endif # source test.csh yes # print &quot;Input is YES&quot; Interrupt Handlingcode 1 2 3 4 5 6 7 8 9 10# used to transfer control to onintr statement once CTRL+C is done to kill the script. onintr close while (1 &amp;gt; 0) echo &quot;Loading avengers....&quot; sleep 2 end close: echo &quot;Avengers killed..&quot; echo &quot;Yet Ironman is safe!&quot; How to's How to store the output of a command?code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20# backquotes is used to store command's output to a variable for further processing set a = `pwd` echo $a # prints /usr2/gilango/study set b = `date` echo $b # Sun Apr 14 13:45:25 IST 2019 echo $b[1] # Sun foreach f ($b) echo $f end # prints # Sun # Apr # 14 # 13:45:25 # IST # 2019 How to read user input?code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20# two ways to read user input # method 1: set a = $&amp;lt; echo -n &quot;Input a value for a: &quot; set a = $&amp;lt; echo &quot;You entered a as: $a&quot; # prints # Input a value for a: 9 # You entered a as: 9 # method 2: set a = `head -1` echo -n &quot;Input a value for a: &quot; set a = `head -1` echo &quot;You entered a as: $a&quot; # prints # Input a value for a: 21 # You entered a as: 21 How to use single and double quotes?code 1 2 3 4 5 6 7 8 9 10 11 12 13# single quotes # * allow inclusion of spaces # * prevent variable substitution # * allow filename generation # double quotes # * allow inclusion of spaces # * allow variable substitution # * allow filename generation set a = -l echo 'ls $a' # prints ls $a echo &quot;ls $a&quot; # prints ls -l</summary></entry><entry><title type="html">My Awesome Movies List</title><link href="http://localhost:4000/random/my-awesome-movies-list" rel="alternate" type="text/html" title="My Awesome Movies List" /><published>2019-04-08T00:00:00+05:30</published><updated>2019-04-08T00:00:00+05:30</updated><id>http://localhost:4000/random/movies-that-i-have-watched</id><content type="html" xml:base="http://localhost:4000/random/my-awesome-movies-list">&lt;p&gt;Here, I list down all those amazing movies that I have watched and yet to watch in Hollywood. My favorite &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_genres&quot; target=&quot;_blank&quot;&gt;movie genres&lt;/a&gt; are action, adventure, comedy, mystery, romance, science fiction and thriller.&lt;/p&gt;

&lt;h3&gt;MCU&lt;/h3&gt;
&lt;ul class=&quot;movie-list&quot;&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Captain America - The First Avenger &lt;span&gt;2011&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Iron Man &lt;span&gt;2008&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;The Incredible Hulk &lt;span&gt;2008&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Iron Man 2 &lt;span&gt;2010&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Thor &lt;span&gt;2011&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;The Avengers &lt;span&gt;2012&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Iron Man 3 &lt;span&gt;2013&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Thor - The Dark World &lt;span&gt;2013&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Captain America - The Winter Soldier &lt;span&gt;2014&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Guardians of the Galaxy &lt;span&gt;2014&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Guardians of the Galaxy Vol 2 &lt;span&gt;2017&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Avengers - Age of Ultron &lt;span&gt;2015&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Ant-Man &lt;span&gt;2015&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Captain America - Civil War &lt;span&gt;2016&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Spider-Man Homecoming &lt;span&gt;2017&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Doctor Strange &lt;span&gt;2016&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Thor - Ragnarok &lt;span&gt;2017&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Black Panther &lt;span&gt;2018&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Avengers - Infinity War &lt;span&gt;2018&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; /&gt;Ant-Man and the Wasp &lt;span&gt;2018&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; /&gt;Captain Marvel &lt;span&gt;2019&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Avengers - The Endgame &lt;span&gt;2019&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3&gt;Others&lt;/h3&gt;
&lt;ul class=&quot;movie-list&quot;&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;A Brilliant Young Mind &lt;span&gt;2014&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Anaconda &lt;span&gt;1997&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Anacondas - The Hunt For The Blood Orchid &lt;span&gt;2004&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Baywatch &lt;span&gt;2017&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Freedom Writers &lt;span&gt;2007&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Interstellar &lt;span&gt;2014&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Jumanji - Welcome to the Jungle &lt;span&gt;2017&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Life of Pi &lt;span&gt;2012&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Lilo and Stitch &lt;span&gt;2002&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Martian &lt;span&gt;2015&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Rush &lt;span&gt;2013&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Spider Man 1&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Spider Man 2 &lt;span&gt;2004&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Spider Man 3 &lt;span&gt;2007&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;The Internship &lt;span&gt;2013&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;The Pursuit of Happiness &lt;span&gt;2006&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;The Social Network &lt;span&gt;2010&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Titanic &lt;span&gt;1996&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;WALL-E &lt;span&gt;2008&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gogul Ilango</name></author><category term="random" /><summary type="html">Here, I list down all those amazing movies that I have watched and yet to watch in Hollywood. My favorite movie genres are action, adventure, comedy, mystery, romance, science fiction and thriller. MCU Captain America - The First Avenger 2011 Iron Man 2008 The Incredible Hulk 2008 Iron Man 2 2010 Thor 2011 The Avengers 2012 Iron Man 3 2013 Thor - The Dark World 2013 Captain America - The Winter Soldier 2014 Guardians of the Galaxy 2014 Guardians of the Galaxy Vol 2 2017 Avengers - Age of Ultron 2015 Ant-Man 2015 Captain America - Civil War 2016 Spider-Man Homecoming 2017 Doctor Strange 2016 Thor - Ragnarok 2017 Black Panther 2018 Avengers - Infinity War 2018 Ant-Man and the Wasp 2018 Captain Marvel 2019 Avengers - The Endgame 2019 Others A Brilliant Young Mind 2014 Anaconda 1997 Anacondas - The Hunt For The Blood Orchid 2004 Baywatch 2017 Freedom Writers 2007 Interstellar 2014 Jumanji - Welcome to the Jungle 2017 Life of Pi 2012 Lilo and Stitch 2002 Martian 2015 Rush 2013 Spider Man 1 Spider Man 2 2004 Spider Man 3 2007 The Internship 2013 The Pursuit of Happiness 2006 The Social Network 2010 Titanic 1996 WALL-E 2008</summary></entry><entry><title type="html">Data Structures &amp;amp; Algorithms in Python</title><link href="http://localhost:4000/software/data-structures-and-algorithms-in-python" rel="alternate" type="text/html" title="Data Structures &amp; Algorithms in Python" /><published>2018-12-28T00:00:00+05:30</published><updated>2018-12-28T00:00:00+05:30</updated><id>http://localhost:4000/software/data-structures-python</id><content type="html" xml:base="http://localhost:4000/software/data-structures-and-algorithms-in-python">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#time-complexity&quot;&gt;Time Complexity&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#complexity-classes&quot;&gt;Complexity Classes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#linked-list&quot;&gt;Linked List&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#bubble-sort&quot;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#quick-sort&quot;&gt;Quick Sort&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;time-complexity&quot;&gt;Time Complexity&lt;/h3&gt;

&lt;p&gt;Instead of asking, &lt;em&gt;how much time does it take to run a function&lt;/em&gt;, in time complexity’s language, we ask &lt;em&gt;how does the runtime of a function grow?&lt;/em&gt; To learn more about Big O notation and Time Complexity, please watch &lt;a href=&quot;https://www.youtube.com/watch?v=D6xkbGLQesk&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; excellent video.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
    &lt;p&gt;&lt;b&gt;Finding Time Complexity&lt;/b&gt;&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;Find the fastest growing term&lt;/li&gt;
        &lt;li&gt;Take out the coefficient&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;\(O(1)\) - Swap two numbers.&lt;/li&gt;
  &lt;li&gt;\(O(logn)\) - Search in a sorted array with binary search.&lt;/li&gt;
  &lt;li&gt;\(O(n)\) - Search for a maximum element in an unsorted array.&lt;/li&gt;
  &lt;li&gt;\(O(n*logn)\) - Merge Sort, Quick Sort, Heap Sort.&lt;/li&gt;
  &lt;li&gt;\(O(n^2)\) - Bubble Sort.&lt;/li&gt;
  &lt;li&gt;\(O(2^n)\) - Travelling Salesman Problem with Dynamic Programming.&lt;/li&gt;
  &lt;li&gt;\(O(n!)\) - Travelling Salesman Problem with Brute Force Search.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1oIw8LnBDfmWtKmDsbAdXvRSxmHNOQXSr&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Big O &amp;amp; Time Complexity&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;complexity-classes&quot;&gt;Complexity Classes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;\(\text{P}\) - Polynomial
    &lt;ul&gt;
      &lt;li&gt;One of the most fundamental complexity classes.&lt;/li&gt;
      &lt;li&gt;Contains all decision problems that can be solved by a deterministic Turing machine.&lt;/li&gt;
      &lt;li&gt;\(\text{P}\) is the class of computational problems that are efficiently solvable.&lt;/li&gt;
      &lt;li&gt;Ex: sorting algorithms.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;\(\text{NP}\) - Non-deterministic Polynomial
    &lt;ul&gt;
      &lt;li&gt;If we have a solution to a problem, we can verify this solution in polynomial time (by a deterministic Turing machine).&lt;/li&gt;
      &lt;li&gt;For instance where the answer in Yes, have efficiently verifiable proofs of the fact that the answer is indeed yes.&lt;/li&gt;
      &lt;li&gt;The complexity class \(\text{P}\) is contained in \(\text{NP}\).&lt;/li&gt;
      &lt;li&gt;Most important question is \(\text{N}\) = \(\text{NP}\) is it true?&lt;/li&gt;
      &lt;li&gt;Ex: Integer Factorization, Travelling Salesman Problem.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;\(\text{NP complete}\)
    &lt;ul&gt;
      &lt;li&gt;A decision problem is \(\text{NP complete}\) when it is both in \(\text{NP}\) and \(\text{NP hard}\).&lt;/li&gt;
      &lt;li&gt;Although any given solution to an \(\text{NP complete}\) problem can be verified in polynomial time, there is no known efficient way to locate a solution in the first place.&lt;/li&gt;
      &lt;li&gt;We ususually just look for an approximate solution.&lt;/li&gt;
      &lt;li&gt;Ex: Chinese Postman Problem, Graph Coloring, Hamiltonian Cycle.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;\(\text{NP hard}\)
    &lt;ul&gt;
      &lt;li&gt;This is a class of problems that are at least as hard as the hardest problems in \(\text{NP}\).&lt;/li&gt;
      &lt;li&gt;A problem H is \(\text{NP hard}\) when every problem L in \(\text{NP}\) can be reduced in polynomial time to H.&lt;/li&gt;
      &lt;li&gt;As a consequence, finding a polynomial algorithm to solve any \(\text{NP hard}\) problem would give polynomial algorithms for all the problems in \(\text{NP}\).&lt;/li&gt;
      &lt;li&gt;Ex: Halting problem.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linked-list&quot;&gt;Linked List&lt;/h3&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;linked_list.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# class to create a node that has data and pointer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# class to create a linked list of nodes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;linked_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR: index out of range!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR: index out of range!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;last_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;last_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linked_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Element at 2nd index: {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Elements after erasing element at index 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[1, 2, 3, 4]
Element at 2nd index: 3
Elements after erasing element at index 2
[1, 2, 4]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bubble-sort&quot;&gt;Bubble Sort&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=12AOX_kQQ9hypZxMf7ISz7yNcCmL2SrzH&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Bubble Sort&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;bubble_sort.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create randomized array of length &quot;length&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# array integers are of range 0, maxint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# bubble sort algorithm to input array&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubble_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubble_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[37, 36, 13, 12, 43, 4, 32, 14, 32, 4]
[4, 4, 12, 13, 14, 32, 32, 36, 37, 43]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;merge-sort&quot;&gt;Merge Sort&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=13bP9IE_XhDD6dympWB5DqGIhKfgefEsT&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Merge Sort&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;merge_sort.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create randomized array of length &quot;length&quot;m&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# array integers are of range 0, maxint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# merge sort to combine two arrays&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# final output array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# merge sort algorithm to input array&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# a list of zero or one elements is sorted, by definition&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# split the list in half and call merge sort recursively on each half&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# merge the now-sorted sublists&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[45, 8, 25, 1, 32, 37, 34, 3, 4, 3]
[1, 3, 3, 4, 8, 25, 32, 34, 37, 45]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;quick-sort&quot;&gt;Quick Sort&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=15Gj4lbSkyka2zTIz2EwSkELfTWjOj-k9&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Quick Sort&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;quick_sort.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create randomized array of length &quot;length&quot;m&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# array integers are of range 0, maxint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# quick sort algorithm to input array&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# a list of zero or one elements is sorted, by definition&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# list to hold values based on pivot&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;smaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# choose a random pivot element&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# iterate over each element and compare with pivot  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;smaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# recursively quick sort sub list and concatenate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[3, 27, 12, 8, 12, 39, 1, 2, 23, 8]
[1, 2, 3, 8, 8, 12, 12, 23, 27, 39]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">X Contents Time Complexity Complexity Classes Linked List Bubble Sort Merge Sort Quick Sort Time Complexity Instead of asking, how much time does it take to run a function, in time complexity’s language, we ask how does the runtime of a function grow? To learn more about Big O notation and Time Complexity, please watch this excellent video. Finding Time Complexity Find the fastest growing term Take out the coefficient \(O(1)\) - Swap two numbers. \(O(logn)\) - Search in a sorted array with binary search. \(O(n)\) - Search for a maximum element in an unsorted array. \(O(n*logn)\) - Merge Sort, Quick Sort, Heap Sort. \(O(n^2)\) - Bubble Sort. \(O(2^n)\) - Travelling Salesman Problem with Dynamic Programming. \(O(n!)\) - Travelling Salesman Problem with Brute Force Search. Big O &amp;amp; Time Complexity Complexity Classes \(\text{P}\) - Polynomial One of the most fundamental complexity classes. Contains all decision problems that can be solved by a deterministic Turing machine. \(\text{P}\) is the class of computational problems that are efficiently solvable. Ex: sorting algorithms. \(\text{NP}\) - Non-deterministic Polynomial If we have a solution to a problem, we can verify this solution in polynomial time (by a deterministic Turing machine). For instance where the answer in Yes, have efficiently verifiable proofs of the fact that the answer is indeed yes. The complexity class \(\text{P}\) is contained in \(\text{NP}\). Most important question is \(\text{N}\) = \(\text{NP}\) is it true? Ex: Integer Factorization, Travelling Salesman Problem. \(\text{NP complete}\) A decision problem is \(\text{NP complete}\) when it is both in \(\text{NP}\) and \(\text{NP hard}\). Although any given solution to an \(\text{NP complete}\) problem can be verified in polynomial time, there is no known efficient way to locate a solution in the first place. We ususually just look for an approximate solution. Ex: Chinese Postman Problem, Graph Coloring, Hamiltonian Cycle. \(\text{NP hard}\) This is a class of problems that are at least as hard as the hardest problems in \(\text{NP}\). A problem H is \(\text{NP hard}\) when every problem L in \(\text{NP}\) can be reduced in polynomial time to H. As a consequence, finding a polynomial algorithm to solve any \(\text{NP hard}\) problem would give polynomial algorithms for all the problems in \(\text{NP}\). Ex: Halting problem. Linked List codelinked_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71# class to create a node that has data and pointer class node: def __init__(self, data=None): self.data = data self.next = None # class to create a linked list of nodes class linked_list: def __init__(self): self.head = node() def append(self, data): new_node = node(data) cur = self.head while cur.next != None: cur = cur.next cur.next = new_node def length(self): cur = self.head total = 0 while cur.next != None: total += 1 cur = cur.next return total def display(self): elems = [] cur_node = self.head while cur_node.next != None: cur_node = cur_node.next elems.append(cur_node.data) print(elems) def get(self, index): if index &amp;gt;= self.length(): print(&quot;ERROR: index out of range!&quot;) return None cur_idx = 0 cur_node = self.head while True: cur_node = cur_node.next if cur_idx == index: return cur_node.data cur_idx += 1 def erase(self, index): if index &amp;gt;= self.length(): print(&quot;ERROR: index out of range!&quot;) return None cur_idx = 0 cur_node = self.head while True: last_node = cur_node cur_node = cur_node.next if cur_idx == index: last_node.next = cur_node.next return cur_idx += 1 if __name__ == '__main__': my_list = linked_list() my_list.append(1) my_list.append(2) my_list.append(3) my_list.append(4) my_list.display() print(&quot;Element at 2nd index: {}&quot;.format(my_list.get(2))) my_list.erase(2) print(&quot;Elements after erasing element at index 2&quot;) my_list.display() 1 2 3 4[1, 2, 3, 4] Element at 2nd index: 3 Elements after erasing element at index 2 [1, 2, 4] Bubble Sort Bubble Sort codebubble_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26from random import randint # create randomized array of length &quot;length&quot; # array integers are of range 0, maxint def create_array(length=10, maxint=50): new_arr = [randint(0, maxint) for _ in range(length)] return new_arr #------------------------------------- # bubble sort algorithm to input array #------------------------------------- def bubble_sort(arr): swapped = True while swapped: swapped = False for i in range(1, len(arr)): if arr[i-1] &amp;gt; arr[i]: arr[i], arr[i-1] = arr[i-1], arr[i] swapped = True return arr if __name__ == '__main__': a = create_array() print(a) a = bubble_sort(a) print(a) 1 2[37, 36, 13, 12, 43, 4, 32, 14, 32, 4] [4, 4, 12, 13, 14, 32, 32, 36, 37, 43] Merge Sort Merge Sort codemerge_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49from random import randint # create randomized array of length &quot;length&quot;m # array integers are of range 0, maxint def create_array(length=10, maxint=50): new_arr = [randint(0, maxint) for _ in range(length)] return new_arr #------------------------------------- # merge sort to combine two arrays #------------------------------------- def merge(a,b): # final output array c = [] a_idx, b_idx = 0, 0 while a_idx&amp;lt;len(a) and b_idx&amp;lt;len(b): if a[a_idx]&amp;lt;b[b_idx]: c.append(a[a_idx]) a_idx += 1 else: c.append(b[b_idx]) b_idx += 1 if a_idx == len(a): c.extend(b[b_idx:]) else: c.extend(a[a_idx:]) return c #------------------------------------- # merge sort algorithm to input array #------------------------------------- def merge_sort(a): # a list of zero or one elements is sorted, by definition if len(a) &amp;lt;= 1: return a # split the list in half and call merge sort recursively on each half mid = int(len(a)/2) left, right = merge_sort(a[:mid]), merge_sort(a[mid:]) # merge the now-sorted sublists return merge(left,right) if __name__ == '__main__': a = create_array() print(a) s = merge_sort(a) print(s) 1 2[45, 8, 25, 1, 32, 37, 34, 3, 4, 3] [1, 3, 3, 4, 8, 25, 32, 34, 37, 45] Quick Sort Quick Sort codequick_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34from random import randint # create randomized array of length &quot;length&quot;m # array integers are of range 0, maxint def create_array(length=10, maxint=50): new_arr = [randint(0, maxint) for _ in range(length)] return new_arr # quick sort algorithm to input array def quick_sort(a): # a list of zero or one elements is sorted, by definition if len(a) &amp;lt;= 1: return a # list to hold values based on pivot smaller, equal, larger = [], [], [] # choose a random pivot element pivot = a[randint(0,len(a)-1)] # iterate over each element and compare with pivot for x in a: if x&amp;lt;pivot: smaller.append(x) elif x==pivot: equal.append(x) else: larger.append(x) # recursively quick sort sub list and concatenate return quick_sort(smaller) + equal + quick_sort(larger) if __name__ == '__main__': a = create_array() print(a) s = quick_sort(a) print(s) 1 2[3, 27, 12, 8, 12, 39, 1, 2, 23, 8] [1, 2, 3, 8, 8, 12, 12, 23, 27, 39]</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1BmxJGJpdBOkiDG5cNaWfzFwA155PLRtp" /></entry><entry><title type="html">VLSI Physical Design Flow</title><link href="http://localhost:4000/hardware/physical-design-flow-1" rel="alternate" type="text/html" title="VLSI Physical Design Flow" /><published>2018-12-26T00:00:00+05:30</published><updated>2018-12-26T00:00:00+05:30</updated><id>http://localhost:4000/hardware/vlsi-physical-design-flow-1</id><content type="html" xml:base="http://localhost:4000/hardware/physical-design-flow-1">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#what-is-vlsi-physical-design&quot;&gt;What is VLSI Physical Design?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#why-vlsi-physical-design-flow&quot;&gt;Why VLSI Physical Design Flow?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#vlsi-physical-design-flow&quot;&gt;VLSI Physical Design Flow&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#importing-inputs&quot;&gt;Importing Inputs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#floorplanning-and-partitioning&quot;&gt;Floorplanning &amp;amp; Partitioning&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#power-planning&quot;&gt;Power Planning&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_7&quot; href=&quot;#placement&quot;&gt;Placement&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_8&quot; href=&quot;#clock-tree-synthesis&quot;&gt;Clock Tree Synthesis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_9&quot; href=&quot;#routing&quot;&gt;Routing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_10&quot; href=&quot;#static-timing-analysis&quot;&gt;Static Timing Analysis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_11&quot; href=&quot;#power-verification&quot;&gt;Power Verification&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;When I was a kid, I used to spend time with playstation and computers. At that time, I always wondered how those tiny components inside rectangular black boxes entertain me by making me play cool games and watch movies. When I grew up, I realized its the combination of &lt;a href=&quot;https://www.britannica.com/technology/logic-design&quot; target=&quot;_blank&quot;&gt;logic design&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_design_(electronics)&quot; target=&quot;_blank&quot;&gt;physical design&lt;/a&gt; that makes an Integrated Circuit that is sitting inside the device you currently hold in your hand.&lt;/p&gt;

&lt;p&gt;In this blog post, we will learn the basics of VLSI physical design or VLSI backend design that is used to create modern Integrated Circuits (ICs) that power up numerous electronic applications such as desktop, laptop, tablet, smartphone etc.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=19X_ir_iqjaZjwyd7TOUbWucIo7M9juXC&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Logic Design (Frontend) vs Physical Design (Backend)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;what-is-vlsi-physical-design&quot;&gt;What is VLSI Physical Design?&lt;/h3&gt;

&lt;p&gt;The final output of a frontend design or circuit design or logic design is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Netlist&quot; target=&quot;_blank&quot;&gt;netlist&lt;/a&gt;. Netlist is a text file (ending with &lt;span class=&quot;coding&quot;&gt;.v&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;.vhdl&lt;/span&gt;) that contains the logical functionality of your chip. This netlist could be viewed as a plethora of instances (standard cells, macros, io pads etc.,) with interconnections (nets) between them based on the functionality you wish to implement.&lt;/p&gt;

&lt;p&gt;This connectivity information in a netlist is a layer of abstraction of your hardware which must be converted to a physically realizable format (having geometric shapes) that is manufacturable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The process of converting a gate-level netlist (written using a Hardware Description Language) into a physically realizable format (GDSII) which finally becomes the hardware is called &lt;strong&gt;Physical Design&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1UukCMvCLe6YCEXghL6pVpr8TOzkaYE-D&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 1. Circuit to Layout&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Actually, Physical Design contains a lot more steps to be done than the above simplified definition. Figure 1 shows the conversion of a simple transistor level circuit to a physically realizable layout. It would be a dream come true for any hardware engineer if there is a tool that takes in a gate-level netlist and constructs a physical layout that is optimized for performance, power and area!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/GDSII&quot; target=&quot;_blank&quot;&gt;GDSII&lt;/a&gt; layout format is a binary file format that represents your IC layout using geometric shapes, text labels and additional foundry specific information in a hierarchical form. You will understand what this means by looking at the video below which shows a GDSII layout file in 3D (created by IC Design Group at University of Twente).&lt;/p&gt;

&lt;div class=&quot;youtube-video-container&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/F4EArOqNNSU?start=3&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In VLSI, Physical Design is the only domain where you can see circuits in a Graphical User Interface (GUI) with geometric shapes and colors as shown in Figure 2. It is an excellent career choice for engineering minds with an &lt;em&gt;artistic&lt;/em&gt; background because you will be drawing layout specific geometries either manually or using code!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=13C4Wv7XlTi9WUdiC7q_EBHD1jxPjsGcD&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 2. A typical chip when looked from a physical design perspective&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;By this time, you might be overwhelmed by the complexity of the layout artwork (which finally becomes your hardware IC) that you have just seen in the above video and image. But, don’t worry. This is where automation becomes your friend!&lt;/p&gt;

&lt;p&gt;Physical Design involves dedicated automation flows and methodologies for each and every step in the design process with the help of Electronic Design Automation (EDA) tools and scripts written in languages such as Tcl, Perl or Python.&lt;/p&gt;

&lt;p&gt;A design will never function as expected if it is not verified and validated 100% before manufacturing. Hence, Physical Design involves robust verification flows (or the so-called &lt;a href=&quot;https://en.wikipedia.org/wiki/Signoff_(electronic_design_automation)&quot; target=&quot;_blank&quot;&gt;signoff&lt;/a&gt; flows) to verify and validate the design in terms of timing, power, area and functionality.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-vlsi-physical-design-flow&quot;&gt;Why VLSI Physical Design Flow?&lt;/h3&gt;

&lt;p&gt;Physical design is all about placing instances defined in the netlist and connecting them by routing through metal layer stack to satisfy design specifications such as performance, power and area (PPA). Current IC designs have &lt;em&gt;multi-million instances&lt;/em&gt; that are interconnected with &lt;em&gt;several stack of metal layers&lt;/em&gt; that connect these instances. Manually performing each step in the design process is not feasible, takes huge amount of time and is error prone.&lt;/p&gt;

&lt;p&gt;The complexity in designing a multi-million instance based IC is huge and hence we need dedicated automation flows that complete specific tasks needed to be performed at each step in the design which reduces design time and errors. These flows require knowledge and understanding of &lt;a href=&quot;https://en.wikipedia.org/wiki/Electronic_design_automation&quot; target=&quot;_blank&quot;&gt;EDA tools&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Scripting_language&quot; target=&quot;_blank&quot;&gt;scripting languages&lt;/a&gt; such as Tcl, Perl or Python.&lt;/p&gt;

&lt;p&gt;In addition to complexity, as time to market for chips is decreasing, reuse of IP (Intellectual Property) blocks is highly preferred in each design.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;vlsi-physical-design-flow&quot;&gt;VLSI Physical Design Flow&lt;/h3&gt;

&lt;p&gt;Typical VLSI Physical Design (PD) flow is shown in Figure 3. This is a standard flow that is followed in modern IC design. Each step in the PD flow has sub flows or further steps that are needed to be performed.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=116LfKvpnRinjDT7uVDttK7q2WTqWiqh7&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 3. VLSI Physical Design Flow&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Major steps involved in Physical Design are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Importing Inputs&lt;/li&gt;
  &lt;li&gt;Floorplanning &amp;amp; Partitioning&lt;/li&gt;
  &lt;li&gt;Power Planning&lt;/li&gt;
  &lt;li&gt;Placement&lt;/li&gt;
  &lt;li&gt;Clock Tree Synthesis (CTS)&lt;/li&gt;
  &lt;li&gt;Routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Major verification (signoff) steps involved in Physical Design are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Static Timing Analysis (STA)&lt;/li&gt;
  &lt;li&gt;Power Distribution Network Analysis (PDN)&lt;/li&gt;
  &lt;li&gt;Physical Verification (PV)&lt;/li&gt;
  &lt;li&gt;Formal Verification (FV)&lt;/li&gt;
  &lt;li&gt;Conformal Low Power Verification (CLP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Commonly used EDA tools for Floorplanning, Place and Route are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/hierarchical-design-and-floorplanning/innovus-implementation-system.html&quot;&gt;Cadence Innovus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/block-implementation/first-encounter-design-exploration-and-prototyping.html&quot; target=&quot;_blank&quot;&gt;Cadence First Encounter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synopsys.com/implementation-and-signoff/physical-implementation/ic-compiler-ii.html&quot; target=&quot;_blank&quot;&gt;Synopsys IC Compiler II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Commonly used EDA tools for signoff checks are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synopsys.com/implementation-and-signoff/signoff/starrc.html&quot; target=&quot;_blank&quot;&gt;Synopsys StarRC&lt;/a&gt; for Parasitic Extraction&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synopsys.com/implementation-and-signoff/signoff/primetime.html&quot; target=&quot;_blank&quot;&gt;Synopsys PrimeTime&lt;/a&gt; for Static Timing Analysis&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansys.com/products/semiconductors/ansys-redhawk&quot; target=&quot;_blank&quot;&gt;Apache RedHawk&lt;/a&gt; for Power Analysis and Debugging&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mentor.com/training/course_categories/calibre&quot; target=&quot;_blank&quot;&gt;Mentor Graphics Calibre&lt;/a&gt; for Physical Verification&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/logic-equivalence-checking.html&quot; target=&quot;_blank&quot;&gt;Cadence Logic Equivalence Checker&lt;/a&gt; for Formal Verfication&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/low-power-validation/conformal-low-power.html&quot; target=&quot;_blank&quot;&gt;Cadence Conformal Low Power&lt;/a&gt; for Conformal Low Power Verification&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;importing-inputs&quot;&gt;Importing Inputs&lt;/h3&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal&lt;/b&gt;: Gather all the required inputs for physical design such as gate level netlist &lt;span class=&quot;coding&quot;&gt;.v&lt;/span&gt; / &lt;span class=&quot;coding&quot;&gt;.vhdl&lt;/span&gt;, Technology file &lt;span class=&quot;coding&quot;&gt;.tech&lt;/span&gt;, UPF (Unified Power Format) files &lt;span class=&quot;coding&quot;&gt;.upf&lt;/span&gt;, Library files that include LIBs &lt;span class=&quot;coding&quot;&gt;.lib&lt;/span&gt;, LEFs &lt;span class=&quot;coding&quot;&gt;.lef&lt;/span&gt;, DEFs &lt;span class=&quot;coding&quot;&gt;.def&lt;/span&gt; and GDS &lt;span class=&quot;coding&quot;&gt;.gds&lt;/span&gt; of standard cells and IPs and SDC (Synopsys Design Constraint) files &lt;span class=&quot;coding&quot;&gt;.sdc&lt;/span&gt;. &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Inputs to physical design are the most important files that you will need to start your design process. If the inputs are read in the EDA tools without any issues (warnings and errors), then your physical design flow goes smooth.&lt;/p&gt;

&lt;p&gt;Commonly required inputs to start physical design for an IC are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Gate-level Netlist &lt;span class=&quot;coding&quot;&gt;.v&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;.vhdl&lt;/span&gt; (given by synthesis people)&lt;/li&gt;
  &lt;li&gt;Technology file &lt;span class=&quot;coding&quot;&gt;.tech&lt;/span&gt; (given by fabrication people)&lt;/li&gt;
  &lt;li&gt;Logical libraries &lt;span class=&quot;coding&quot;&gt;.lib&lt;/span&gt; (given by vendors)&lt;/li&gt;
  &lt;li&gt;Physical libraries &lt;span class=&quot;coding&quot;&gt;.lef&lt;/span&gt; &lt;span class=&quot;coding&quot;&gt;.def&lt;/span&gt; &lt;span class=&quot;coding&quot;&gt;.gds&lt;/span&gt; (given by vendors)&lt;/li&gt;
  &lt;li&gt;UPF (Unified Power Format) files &lt;span class=&quot;coding&quot;&gt;.upf&lt;/span&gt; (given by UPF people)&lt;/li&gt;
  &lt;li&gt;SDC (Synopsys Design Constraints) files &lt;span class=&quot;coding&quot;&gt;.sdc&lt;/span&gt; (given by synthesis people)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;floorplanning-and-partitioning&quot;&gt;Floorplanning &amp;amp; Partitioning&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#floorplanning&quot; target=&quot;_blank&quot;&gt;Floorplanning&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal&lt;/b&gt;: Calculate the die size, create IO ring, partition the design and calculate the size, shape and placement of partitions (HMs or blocks), figure out the position of custom macros such as analog macros and create PG grid.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In today’s IC design, because of huge design complexity, hierarchical design approach is followed. What this means is, the entire chip is divided into partitions or blocks that are interconnected at a &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; module.&lt;/p&gt;

&lt;p&gt;Figure 4 shows a typical &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; floorplan module of an IC with abutted blocks, non-abutted blocks and routing channels.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1OEMmPap64JbLTyrgeSCv-GoQ9xCGhzv5&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 4. A typical view of top-level floorplan of an IC&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; module of your chip contains hard blocks and soft blocks with or without glue logic (standard cells in &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hard&lt;/strong&gt; blocks are those sub-blocks whose shapes &lt;em&gt;cannot&lt;/em&gt; be changed. These blocks are mostly IPs or &lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#macro&quot; target=&quot;_blank&quot;&gt;macros&lt;/a&gt; that are already designed and validated for that particular &lt;a href=&quot;https://en.wikichip.org/wiki/technology_node&quot; target=&quot;_blank&quot;&gt;technology node&lt;/a&gt;. Placement of these blocks are decided based on design understanding and package requirements in &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Soft&lt;/strong&gt; blocks are those blocks whose shapes &lt;em&gt;can&lt;/em&gt; be changed to meet predefined cost metrics such as chip area, wirelength and wire congestion. These are the blocks that are needed to be designed and validated for chip-level convergence. In industry terms, these &lt;strong&gt;soft&lt;/strong&gt; blocks are called as &lt;strong&gt;Hard Macros&lt;/strong&gt; or &lt;strong&gt;HMs&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During floorplanning, one must ensure proper shapes for the hard macros (HMs) until convergence is reached in terms of cost metrics, timing, power and area.&lt;/p&gt;

&lt;p&gt;Due to design complexity and runtime of EDA tools, each hard macro (HM) is created using the same design steps such as floorplanning, placement and routing and then integrated at the &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; module.&lt;/p&gt;

&lt;p&gt;Dividing the entire design into smaller sub-designs (partitions) makes design convergence easier. This is because, the runtime of EDA tools for a single partition (block) will take lesser time for each step in the PD flow when compared to entire design.&lt;/p&gt;

&lt;p&gt;Physical Design is all about tradeoffs between &lt;strong&gt;area&lt;/strong&gt;, &lt;strong&gt;speed&lt;/strong&gt; and &lt;strong&gt;power&lt;/strong&gt;. Thus, floorplanning is a &lt;em&gt;highly iterative process&lt;/em&gt; which takes into account the hard blocks and soft blocks used, memories, IO pads and their placement in the design, routing possibilities between different blocks and inside the blocks, power grid structure for each macro and cell in the design, and also the aspect ratio and IO structure of the entire design.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;power-planning&quot;&gt;Power Planning&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#power-distribution&quot; target=&quot;_blank&quot;&gt;Power Distribution&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal&lt;/b&gt;: Decide on power dissipation number and construct power distribution network accordingly to power up blocks, IO pads, macros and standard cells.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; that you see in the transistor level circuit in Figure 1 needs to be supplied to every transistor in a multi-million transistor design. Thus, power from a single battery source must be delivered to each cell in the design. To accomplish this, power planning is done.&lt;/p&gt;

&lt;p&gt;During floorplanning, power planning is a step that is done to construct the power distribution network to supply power to all blocks, macros and standard cells equally.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1ECjeWM7ftyeFnILkx4IPcm6sQDtPPlCT&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 6. Power Planning (or Power Distribution) in an IC&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown in Figure 6, there are two types of power distribution strategies followed in chip design namely Wire Bonding and Flip-Chip &lt;a href=&quot;https://gogul09.github.io/hardware/power-distribution-network-in-asic-physical-design&quot; target=&quot;_blank&quot;&gt;(read more)&lt;/a&gt;. Using any one of these two power distribution strategies, we usually form power rings, stripes and rails through out the design.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rings&lt;/strong&gt; - Supplies &lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; around the chip.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stripes&lt;/strong&gt; - Supplies &lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; across/throughout the chip.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rails&lt;/strong&gt; - Supplies &lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; to the standard cells in the design.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Main steps to be taken care during power planning are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decision on width, pitch and offset of power stripes for each metal layer.&lt;/li&gt;
  &lt;li&gt;Block power hook up at &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;IO power hook up at &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;Standard cells power hook up inside block as well as &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;Shorts and Opens are to be checked and fixed.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;placement&quot;&gt;Placement&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#placement&quot; target=&quot;_blank&quot;&gt;Placement&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Place all the standard cells in the design to minimize total area, reduce interconnect cost, reduce congestion hotspots and improve timing. &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;After floorplanning the design, for each block, &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_cell&quot; target=&quot;_blank&quot;&gt;standard cells&lt;/a&gt; are placed inside the block. These standard cells are the functional cells that contain the necessary logic functionality for your chip that are provided to you by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_fabrication_plant&quot; target=&quot;_blank&quot;&gt;foundry&lt;/a&gt;. Inside the standard cells, you could find the individual transistors that make up the logic functionality. &lt;em&gt;Ex: AND gate, OR gate, 2x1 multiplexer etc.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you think of a &lt;strong&gt;chip&lt;/strong&gt; as the &lt;strong&gt;house&lt;/strong&gt;, then &lt;strong&gt;placement&lt;/strong&gt; is the process of placing &lt;strong&gt;each individual brick&lt;/strong&gt; (standard cell) that make up the house.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a multi-million instances design, placing these cells manually is not feasible. Hence, EDA tool place these cells in the standard cell rows (created during floorplanning) with conflicting goals of optimizing congestion, timing and power. Placement is carried out with the help of virtual route.&lt;/p&gt;

&lt;p&gt;Virtual route is a rough estimate for the EDA tool to measure the shortest &lt;a href=&quot;https://www.quora.com/What-is-Manhattan-Distance&quot; target=&quot;_blank&quot;&gt;manhattan distance&lt;/a&gt; from one standard cell pin to another. Based on this distance, timing is calculated roughly and these cells are placed accordingly.&lt;/p&gt;

&lt;p&gt;A good placement reduces the delay of interconnect wires, has shorter interconnect wire length and has lesser congestion hotspots. One key thing performed during placement is &lt;strong&gt;legalization&lt;/strong&gt; which means placing standard cells at appropriate locations without any placement constraint violation or design rule violation. Placement greatly determines the routability of the design.&lt;/p&gt;

&lt;p&gt;Standard placement flow involves the following steps.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pre-placement&lt;/li&gt;
  &lt;li&gt;Global placement&lt;/li&gt;
  &lt;li&gt;High Fanout Net (HFN) synthesis&lt;/li&gt;
  &lt;li&gt;Scan Chain Reordering&lt;/li&gt;
  &lt;li&gt;Detail Placement&lt;/li&gt;
  &lt;li&gt;Timing Optimization&lt;/li&gt;
  &lt;li&gt;Leakage/Area Recovery&lt;/li&gt;
  &lt;li&gt;Legalization&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;clock-tree-synthesis&quot;&gt;Clock Tree Synthesis&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#clock-tree-synthesis&quot; target=&quot;_blank&quot;&gt;Clock Tree Synthesis&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Minimize skew, latency and insertion delay for clock signals reaching all the sequential elements in the design.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Clock is an important component in digital design as sequential circuits such as flipflops and registers require clock signal to function properly. Before clock tree synthesis, the clock is considered as &lt;span class=&quot;coding&quot;&gt;ideal&lt;/span&gt; i.e. right from the source it travels to all the clock pins (sinks) without any delay. But after CTS, the clock is &lt;span class=&quot;coding&quot;&gt;propagated&lt;/span&gt; which means there is considerable amount of delay involved between the clock signal entering one flipflop and another flipflop in the design which is defined as &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_skew&quot; target=&quot;_blank&quot;&gt;clock skew&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal of clock tree synthesis is to reduce this clock skew, balance it and minimize insertion delay (propagation delay from clock source to sink). This is done with the help of constructing a clock tree using special cells such as &lt;em&gt;clock tree inverters&lt;/em&gt; to maintain exact duty cycle (transition) and &lt;em&gt;clock tree buffers&lt;/em&gt; to balance the skew and latency involved.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At fast speeds or long distances, because of &lt;strong&gt;clock skew&lt;/strong&gt; serial interfaces (ex: USB) are preferred over parallel interfaces (ex: parallel SCSI).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Additionally, these clock tree inverters and buffers should be added carefully with area and power constraints in mind. Commonly used clock trees are &lt;em&gt;H-Tree, Fishbone Tree and Star Tree&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Main steps to be taken care during CTS are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Target minimum possible clock skew.&lt;/li&gt;
  &lt;li&gt;Target minimum possible latency.&lt;/li&gt;
  &lt;li&gt;Max transition and Max capacitance limits must be met.&lt;/li&gt;
  &lt;li&gt;Apply Non-Default Routing (NDR) rules for clock nets to reduce crosstalk and noise (signal integrity).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#routing&quot; target=&quot;_blank&quot;&gt;Routing&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Physically connect all the interconnects (nets) in the design with physical constraints such as DRC, wire length, timing, noise and crosstalk to be taken care.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;After placing all the standard cells in the design, interconnects (nets) must be routed physically using the metal layer stack with wires and vias. Routing is typically done in two steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Global Routing&lt;/strong&gt; - Generate a rough route (routing region, track assignment) for each net in the design without specifying the actual layout of wires (loosely routed).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Detail Routing&lt;/strong&gt; - Generate actual geometry layout for each net in the design using different metal layers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each metal layer in the metal layer stack of your design has &lt;em&gt;preferred routing direction&lt;/em&gt; as well as &lt;em&gt;non-preferred routing direction&lt;/em&gt;. For example, &lt;span class=&quot;coding&quot;&gt;M2&lt;/span&gt; metal layer might have preferred routing direction as &lt;em&gt;horizontal&lt;/em&gt; and non-preferred routing direction as &lt;em&gt;vertical&lt;/em&gt;. This constraint is based on the technology node rule.&lt;/p&gt;

&lt;p&gt;Main steps to be taken care during routing are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Wire length must be minimized.&lt;/li&gt;
  &lt;li&gt;Congestion hotspots must be reduced.&lt;/li&gt;
  &lt;li&gt;Noise &amp;amp; Crosstalk must be reduced using shielding and/or NDR techniques.&lt;/li&gt;
  &lt;li&gt;DRC rules (geometry rules) must be honored during detail routing.&lt;/li&gt;
  &lt;li&gt;Shorts must be very minimal.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;static-timing-analysis&quot;&gt;Static Timing Analysis&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#static-timing-analysis&quot; target=&quot;_blank&quot;&gt;Static Timing Analysis&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Validate the design with respect to timing and verify whether the design could operate at the specified clock frequency without any timing violations such as setup, hold, recovery, removal, max transition and max capacitance across different &lt;a href=&quot;https://en.wikipedia.org/wiki/Process_corners&quot; target=&quot;_blank&quot;&gt;PVT corners&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Once the design is placed and routed, it is validated for timing. STA involves checking whether the design meets the &lt;em&gt;specified clock frequency&lt;/em&gt; and is free of &lt;em&gt;timing violations&lt;/em&gt; such as setup, hold, recovery, removal, maximum transition, maximum capacitance etc., across different &lt;em&gt;PVT corners&lt;/em&gt; or &lt;em&gt;operating conditions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;STA largely depends on &lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_extraction&quot; target=&quot;_blank&quot;&gt;parasitic extraction&lt;/a&gt; which is a process of extracting the R (resistance) and C (capacitance) of the interconnect metal traces in the design which are obtained only after detail routing. These RC parasitics causes propagation delay that is further added by the gate delay, resulting in timing degradation.&lt;/p&gt;

&lt;p&gt;You can read more about Static Timing Analysis in the below links.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/sta-timing-paths-and-delays&quot; target=&quot;_blank&quot;&gt;STA Timing Paths and Delays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/cmos-basics-for-sta-2&quot; target=&quot;_blank&quot;&gt;STA CMOS Basics (Part 2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/cmos-basics-for-sta-1&quot; target=&quot;_blank&quot;&gt;STA CMOS Basics (Part 1)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/mosfet-fundamentals&quot; target=&quot;_blank&quot;&gt;STA MOSFET fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;power-verification&quot;&gt;Power Verification&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#power-verification&quot; target=&quot;_blank&quot;&gt;Power Verification&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Validate the design with respect to power and verify whether the design meets static and dynamic IR drop thresholds, and is free from electromagnetic effects.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Similar to timing validation, power analysis and debugging is done to ensure that the design is free from power related issues such as static IR drop, dynamic IR drop and electromagnetic issues.&lt;/p&gt;

&lt;p&gt;Only if the design meets power numbers specified in the design specifications, it can last longer. Hence, power is a primary concern for chip designers due to decreasing technology node and increasing metal layer stack.&lt;/p&gt;

&lt;p&gt;You can read more about low power design in the below links.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/power-distribution-network-in-asic-physical-design&quot; target=&quot;_blank&quot;&gt;Power Distribution Network in ASIC Physical Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/power-reduction-techniques-in-asic-design&quot; target=&quot;_blank&quot;&gt;Power Reduction Techniques in ASIC Design&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;physical-verification&quot;&gt;Physical Verification&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#physical-verification&quot; target=&quot;_blank&quot;&gt;Physical Verification&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Validate the design layout with respect to physical geometries and technology rules for electrical correctness, logical correctness and manufacturability, and make sure the design passes DRC, LVS, ERC, Antenna check and XOR check.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This is the final signoff check that is done for your design before you tape-out your design for fabrication. Design must have zero shorts, zero opens, zero design rule violation, zero antenna violation, zero base violation and must be logically equivalent as the synthesized logic netlist.&lt;/p&gt;

&lt;p&gt;You can read more about physical verification checks &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_verification&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aspdac.com/aspdac2014/technical_program/pdf/6B-3.pdf&quot; target=&quot;_blank&quot;&gt;Routability-Driven Bump Assignment for Chip-Package Co-Design&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gogul Ilango</name></author><category term="hardware" /><summary type="html">X Contents What is VLSI Physical Design? Why VLSI Physical Design Flow? VLSI Physical Design Flow Importing Inputs Floorplanning &amp;amp; Partitioning Power Planning Placement Clock Tree Synthesis Routing Static Timing Analysis Power Verification When I was a kid, I used to spend time with playstation and computers. At that time, I always wondered how those tiny components inside rectangular black boxes entertain me by making me play cool games and watch movies. When I grew up, I realized its the combination of logic design and physical design that makes an Integrated Circuit that is sitting inside the device you currently hold in your hand. In this blog post, we will learn the basics of VLSI physical design or VLSI backend design that is used to create modern Integrated Circuits (ICs) that power up numerous electronic applications such as desktop, laptop, tablet, smartphone etc. Logic Design (Frontend) vs Physical Design (Backend) What is VLSI Physical Design? The final output of a frontend design or circuit design or logic design is a netlist. Netlist is a text file (ending with .v or .vhdl) that contains the logical functionality of your chip. This netlist could be viewed as a plethora of instances (standard cells, macros, io pads etc.,) with interconnections (nets) between them based on the functionality you wish to implement. This connectivity information in a netlist is a layer of abstraction of your hardware which must be converted to a physically realizable format (having geometric shapes) that is manufacturable. The process of converting a gate-level netlist (written using a Hardware Description Language) into a physically realizable format (GDSII) which finally becomes the hardware is called Physical Design. Figure 1. Circuit to Layout Actually, Physical Design contains a lot more steps to be done than the above simplified definition. Figure 1 shows the conversion of a simple transistor level circuit to a physically realizable layout. It would be a dream come true for any hardware engineer if there is a tool that takes in a gate-level netlist and constructs a physical layout that is optimized for performance, power and area! The GDSII layout format is a binary file format that represents your IC layout using geometric shapes, text labels and additional foundry specific information in a hierarchical form. You will understand what this means by looking at the video below which shows a GDSII layout file in 3D (created by IC Design Group at University of Twente). In VLSI, Physical Design is the only domain where you can see circuits in a Graphical User Interface (GUI) with geometric shapes and colors as shown in Figure 2. It is an excellent career choice for engineering minds with an artistic background because you will be drawing layout specific geometries either manually or using code! Figure 2. A typical chip when looked from a physical design perspective By this time, you might be overwhelmed by the complexity of the layout artwork (which finally becomes your hardware IC) that you have just seen in the above video and image. But, don’t worry. This is where automation becomes your friend! Physical Design involves dedicated automation flows and methodologies for each and every step in the design process with the help of Electronic Design Automation (EDA) tools and scripts written in languages such as Tcl, Perl or Python. A design will never function as expected if it is not verified and validated 100% before manufacturing. Hence, Physical Design involves robust verification flows (or the so-called signoff flows) to verify and validate the design in terms of timing, power, area and functionality. Why VLSI Physical Design Flow? Physical design is all about placing instances defined in the netlist and connecting them by routing through metal layer stack to satisfy design specifications such as performance, power and area (PPA). Current IC designs have multi-million instances that are interconnected with several stack of metal layers that connect these instances. Manually performing each step in the design process is not feasible, takes huge amount of time and is error prone. The complexity in designing a multi-million instance based IC is huge and hence we need dedicated automation flows that complete specific tasks needed to be performed at each step in the design which reduces design time and errors. These flows require knowledge and understanding of EDA tools and scripting languages such as Tcl, Perl or Python. In addition to complexity, as time to market for chips is decreasing, reuse of IP (Intellectual Property) blocks is highly preferred in each design. VLSI Physical Design Flow Typical VLSI Physical Design (PD) flow is shown in Figure 3. This is a standard flow that is followed in modern IC design. Each step in the PD flow has sub flows or further steps that are needed to be performed. Figure 3. VLSI Physical Design Flow Major steps involved in Physical Design are Importing Inputs Floorplanning &amp;amp; Partitioning Power Planning Placement Clock Tree Synthesis (CTS) Routing Major verification (signoff) steps involved in Physical Design are Static Timing Analysis (STA) Power Distribution Network Analysis (PDN) Physical Verification (PV) Formal Verification (FV) Conformal Low Power Verification (CLP) Commonly used EDA tools for Floorplanning, Place and Route are Cadence Innovus Cadence First Encounter Synopsys IC Compiler II Commonly used EDA tools for signoff checks are Synopsys StarRC for Parasitic Extraction Synopsys PrimeTime for Static Timing Analysis Apache RedHawk for Power Analysis and Debugging Mentor Graphics Calibre for Physical Verification Cadence Logic Equivalence Checker for Formal Verfication Cadence Conformal Low Power for Conformal Low Power Verification Importing Inputs Goal: Gather all the required inputs for physical design such as gate level netlist .v / .vhdl, Technology file .tech, UPF (Unified Power Format) files .upf, Library files that include LIBs .lib, LEFs .lef, DEFs .def and GDS .gds of standard cells and IPs and SDC (Synopsys Design Constraint) files .sdc. Inputs to physical design are the most important files that you will need to start your design process. If the inputs are read in the EDA tools without any issues (warnings and errors), then your physical design flow goes smooth. Commonly required inputs to start physical design for an IC are Gate-level Netlist .v or .vhdl (given by synthesis people) Technology file .tech (given by fabrication people) Logical libraries .lib (given by vendors) Physical libraries .lef .def .gds (given by vendors) UPF (Unified Power Format) files .upf (given by UPF people) SDC (Synopsys Design Constraints) files .sdc (given by synthesis people) Floorplanning &amp;amp; Partitioning Related Terminologies: [Floorplanning] Goal: Calculate the die size, create IO ring, partition the design and calculate the size, shape and placement of partitions (HMs or blocks), figure out the position of custom macros such as analog macros and create PG grid. In today’s IC design, because of huge design complexity, hierarchical design approach is followed. What this means is, the entire chip is divided into partitions or blocks that are interconnected at a TOP_LEVEL module. Figure 4 shows a typical TOP_LEVEL floorplan module of an IC with abutted blocks, non-abutted blocks and routing channels. Figure 4. A typical view of top-level floorplan of an IC This TOP_LEVEL module of your chip contains hard blocks and soft blocks with or without glue logic (standard cells in TOP_LEVEL). Hard blocks are those sub-blocks whose shapes cannot be changed. These blocks are mostly IPs or macros that are already designed and validated for that particular technology node. Placement of these blocks are decided based on design understanding and package requirements in TOP_LEVEL. Soft blocks are those blocks whose shapes can be changed to meet predefined cost metrics such as chip area, wirelength and wire congestion. These are the blocks that are needed to be designed and validated for chip-level convergence. In industry terms, these soft blocks are called as Hard Macros or HMs. During floorplanning, one must ensure proper shapes for the hard macros (HMs) until convergence is reached in terms of cost metrics, timing, power and area. Due to design complexity and runtime of EDA tools, each hard macro (HM) is created using the same design steps such as floorplanning, placement and routing and then integrated at the TOP_LEVEL module. Dividing the entire design into smaller sub-designs (partitions) makes design convergence easier. This is because, the runtime of EDA tools for a single partition (block) will take lesser time for each step in the PD flow when compared to entire design. Physical Design is all about tradeoffs between area, speed and power. Thus, floorplanning is a highly iterative process which takes into account the hard blocks and soft blocks used, memories, IO pads and their placement in the design, routing possibilities between different blocks and inside the blocks, power grid structure for each macro and cell in the design, and also the aspect ratio and IO structure of the entire design. Power Planning Related Terminologies: [Power Distribution] Goal: Decide on power dissipation number and construct power distribution network accordingly to power up blocks, IO pads, macros and standard cells. VDD and VSS that you see in the transistor level circuit in Figure 1 needs to be supplied to every transistor in a multi-million transistor design. Thus, power from a single battery source must be delivered to each cell in the design. To accomplish this, power planning is done. During floorplanning, power planning is a step that is done to construct the power distribution network to supply power to all blocks, macros and standard cells equally. Figure 6. Power Planning (or Power Distribution) in an IC As shown in Figure 6, there are two types of power distribution strategies followed in chip design namely Wire Bonding and Flip-Chip (read more). Using any one of these two power distribution strategies, we usually form power rings, stripes and rails through out the design. Rings - Supplies VDD and VSS around the chip. Stripes - Supplies VDD and VSS across/throughout the chip. Rails - Supplies VDD and VSS to the standard cells in the design. Main steps to be taken care during power planning are Decision on width, pitch and offset of power stripes for each metal layer. Block power hook up at TOP_LEVEL. IO power hook up at TOP_LEVEL. Standard cells power hook up inside block as well as TOP_LEVEL. Shorts and Opens are to be checked and fixed. Placement Related Terminologies: [Placement] Goal: Place all the standard cells in the design to minimize total area, reduce interconnect cost, reduce congestion hotspots and improve timing. After floorplanning the design, for each block, standard cells are placed inside the block. These standard cells are the functional cells that contain the necessary logic functionality for your chip that are provided to you by the foundry. Inside the standard cells, you could find the individual transistors that make up the logic functionality. Ex: AND gate, OR gate, 2x1 multiplexer etc. If you think of a chip as the house, then placement is the process of placing each individual brick (standard cell) that make up the house. In a multi-million instances design, placing these cells manually is not feasible. Hence, EDA tool place these cells in the standard cell rows (created during floorplanning) with conflicting goals of optimizing congestion, timing and power. Placement is carried out with the help of virtual route. Virtual route is a rough estimate for the EDA tool to measure the shortest manhattan distance from one standard cell pin to another. Based on this distance, timing is calculated roughly and these cells are placed accordingly. A good placement reduces the delay of interconnect wires, has shorter interconnect wire length and has lesser congestion hotspots. One key thing performed during placement is legalization which means placing standard cells at appropriate locations without any placement constraint violation or design rule violation. Placement greatly determines the routability of the design. Standard placement flow involves the following steps. Pre-placement Global placement High Fanout Net (HFN) synthesis Scan Chain Reordering Detail Placement Timing Optimization Leakage/Area Recovery Legalization Clock Tree Synthesis Related Terminologies: [Clock Tree Synthesis] Goal: Minimize skew, latency and insertion delay for clock signals reaching all the sequential elements in the design. Clock is an important component in digital design as sequential circuits such as flipflops and registers require clock signal to function properly. Before clock tree synthesis, the clock is considered as ideal i.e. right from the source it travels to all the clock pins (sinks) without any delay. But after CTS, the clock is propagated which means there is considerable amount of delay involved between the clock signal entering one flipflop and another flipflop in the design which is defined as clock skew. The goal of clock tree synthesis is to reduce this clock skew, balance it and minimize insertion delay (propagation delay from clock source to sink). This is done with the help of constructing a clock tree using special cells such as clock tree inverters to maintain exact duty cycle (transition) and clock tree buffers to balance the skew and latency involved. At fast speeds or long distances, because of clock skew serial interfaces (ex: USB) are preferred over parallel interfaces (ex: parallel SCSI). Additionally, these clock tree inverters and buffers should be added carefully with area and power constraints in mind. Commonly used clock trees are H-Tree, Fishbone Tree and Star Tree. Main steps to be taken care during CTS are Target minimum possible clock skew. Target minimum possible latency. Max transition and Max capacitance limits must be met. Apply Non-Default Routing (NDR) rules for clock nets to reduce crosstalk and noise (signal integrity). Routing Related Terminologies: [Routing] Goal: Physically connect all the interconnects (nets) in the design with physical constraints such as DRC, wire length, timing, noise and crosstalk to be taken care. After placing all the standard cells in the design, interconnects (nets) must be routed physically using the metal layer stack with wires and vias. Routing is typically done in two steps. Global Routing - Generate a rough route (routing region, track assignment) for each net in the design without specifying the actual layout of wires (loosely routed). Detail Routing - Generate actual geometry layout for each net in the design using different metal layers. Each metal layer in the metal layer stack of your design has preferred routing direction as well as non-preferred routing direction. For example, M2 metal layer might have preferred routing direction as horizontal and non-preferred routing direction as vertical. This constraint is based on the technology node rule. Main steps to be taken care during routing are Wire length must be minimized. Congestion hotspots must be reduced. Noise &amp;amp; Crosstalk must be reduced using shielding and/or NDR techniques. DRC rules (geometry rules) must be honored during detail routing. Shorts must be very minimal. Static Timing Analysis Related Terminologies: [Static Timing Analysis] Goal: Validate the design with respect to timing and verify whether the design could operate at the specified clock frequency without any timing violations such as setup, hold, recovery, removal, max transition and max capacitance across different PVT corners. Once the design is placed and routed, it is validated for timing. STA involves checking whether the design meets the specified clock frequency and is free of timing violations such as setup, hold, recovery, removal, maximum transition, maximum capacitance etc., across different PVT corners or operating conditions. STA largely depends on parasitic extraction which is a process of extracting the R (resistance) and C (capacitance) of the interconnect metal traces in the design which are obtained only after detail routing. These RC parasitics causes propagation delay that is further added by the gate delay, resulting in timing degradation. You can read more about Static Timing Analysis in the below links. STA Timing Paths and Delays STA CMOS Basics (Part 2) STA CMOS Basics (Part 1) STA MOSFET fundamentals Power Verification Related Terminologies: [Power Verification] Goal: Validate the design with respect to power and verify whether the design meets static and dynamic IR drop thresholds, and is free from electromagnetic effects. Similar to timing validation, power analysis and debugging is done to ensure that the design is free from power related issues such as static IR drop, dynamic IR drop and electromagnetic issues. Only if the design meets power numbers specified in the design specifications, it can last longer. Hence, power is a primary concern for chip designers due to decreasing technology node and increasing metal layer stack. You can read more about low power design in the below links. Power Distribution Network in ASIC Physical Design Power Reduction Techniques in ASIC Design. Physical Verification Related Terminologies: [Physical Verification] Goal: Validate the design layout with respect to physical geometries and technology rules for electrical correctness, logical correctness and manufacturability, and make sure the design passes DRC, LVS, ERC, Antenna check and XOR check. This is the final signoff check that is done for your design before you tape-out your design for fabrication. Design must have zero shorts, zero opens, zero design rule violation, zero antenna violation, zero base violation and must be logically equivalent as the synthesized logic netlist. You can read more about physical verification checks here. References Routability-Driven Bump Assignment for Chip-Package Co-Design</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1amQI_tQSrnTqYAXhraVpNc1NpJVgPNTE" /></entry><entry><title type="html">Creating Intelligent Music Applications in the Browser</title><link href="http://localhost:4000/software/creating-intelligent-music-applications-in-the-browser" rel="alternate" type="text/html" title="Creating Intelligent Music Applications in the Browser" /><published>2018-12-24T00:00:00+05:30</published><updated>2018-12-24T00:00:00+05:30</updated><id>http://localhost:4000/software/creating-intelligent-music-applications-in-the-browser</id><content type="html" xml:base="http://localhost:4000/software/creating-intelligent-music-applications-in-the-browser">&lt;div class=&quot;git-showcase&quot;&gt;
  &lt;div&gt;
    &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/Gogul09&quot; data-show-count=&quot;true&quot; aria-label=&quot;Follow @Gogul09 on GitHub&quot;&gt;Follow @Gogul09&lt;/a&gt;
  &lt;/div&gt;

  &lt;div&gt;
	&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/Gogul09/deep-drum/fork&quot; data-icon=&quot;octicon-repo-forked&quot; data-show-count=&quot;true&quot; aria-label=&quot;Fork Gogul09/deep-drum on GitHub&quot;&gt;Fork&lt;/a&gt;
  &lt;/div&gt;

  &lt;div&gt;
	&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/Gogul09/deep-drum&quot; data-icon=&quot;octicon-star&quot; data-show-count=&quot;true&quot; aria-label=&quot;Star Gogul09/deep-drum on GitHub&quot;&gt;Star&lt;/a&gt;
  &lt;/div&gt;  
&lt;/div&gt;

&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#why-music-and-ml&quot;&gt;Why Music and ML?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#why-browser-for-ml&quot;&gt;Why browser for ML?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#using-magentas-pre-trained-models&quot;&gt;Using Magenta's Pre-trained Models&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#generating-drum-patterns-using-drumsrnn&quot;&gt;Generating Drum Patterns using DrumsRNN&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#cool-demos&quot;&gt;Cool Demos&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;After the introduction of Google’s &lt;a href=&quot;https://js.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;TensorFlow.js&lt;/a&gt;, it has become a lot easier to make use of browser (client-side) to do Deep learning. There are handy approaches (as discussed &lt;a href=&quot;https://js.tensorflow.org/tutorials/import-keras.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;) on deploying deep learning models using &lt;a href=&quot;https://keras.io/&quot; target=&quot;_blank&quot;&gt;Keras&lt;/a&gt; and TensorFlow.js.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
	&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: To learn more about TensorFlow.js and its applications, kindly visit this &lt;a href=&quot;https://github.com/tensorflow/tfjs/blob/master/GALLERY.md&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;why-music-and-ml&quot;&gt;Why Music and ML?&lt;/h3&gt;

&lt;p&gt;Music generation has already began to catch the eyes of machine learning devs and there are numerous projects that are getting pushed in &lt;a href=&quot;https://github.com/search?q=music+generation&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; every week. Although there exist a barrier between AI Researchers and AI Developers such as complex mathematics that involve derivations and jargons, there is still hope for an AI enthusiast to use code and some music knowledge to create exciting applications that was a dream few years back.&lt;/p&gt;

&lt;p&gt;Leveraging the capabilities of TensorFlow.js, we now have Google’s &lt;a href=&quot;https://magenta.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;Magenta.js&lt;/a&gt; using which any developer with knowledge on javascript and music could create a music application that has intelligence built in to it.&lt;/p&gt;

&lt;p&gt;I loved the concept behind &lt;a href=&quot;https://ai.google/research/teams/brain/magenta/&quot; target=&quot;_blank&quot;&gt;Google’s Magenta team&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a painter creates a work of art, she first blends and explores color options on an artist’s palette before applying them to the canvas. This process is a creative act in its own right and has a profound effect on the final work. Musicians and composers have mostly lacked a similar device for exploring and mixing musical ideas, but we are hoping to change that - &lt;a href=&quot;https://magenta.tensorflow.org/music-vae&quot; target=&quot;_blank&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;why-browser-for-ml&quot;&gt;Why browser for ML?&lt;/h3&gt;

&lt;p&gt;Although one might feel that browsers are light-weight apps that wont handle data intensive algorithms such as deep neural networks, by leveraging the capabilities of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API&quot; target=&quot;_blank&quot;&gt;WebGL&lt;/a&gt; in browsers such as Google Chrome, we could create, train and deploy deep neural net models right in the browser itself without any server requests.&lt;/p&gt;

&lt;p&gt;Another advantage of using browser to create AI applications is that you could easily send your creations to your friends or family using nothing more than a simple link!&lt;/p&gt;

&lt;h3 id=&quot;using-magentas-pre-trained-models&quot;&gt;Using Magenta's Pre-trained Models&lt;/h3&gt;

&lt;p&gt;Magenta.js is a javascript library that is built on top of TensorFlow.js which provides music oriented abstraction for developers. Google’s Magenta Team research, create and train deep learning models such as Long-Short Term Memory nets (LSTMs), Variational Auto-Encoders (VAE) etc., for music generation, and serve those models as pre-trained models for an AI enthusiast like me to use it for free.&lt;/p&gt;

&lt;p&gt;By using a pre-trained magenta model, we could build creative music applications in the browser using deep learning. Some of the note-based music models that are provided by Magenta are MusicVAE, MelodyRNN, DrumsRNN and ImprovRNN. Using these pretrained models, we could use their &lt;a href=&quot;https://github.com/tensorflow/magenta-js/&quot; target=&quot;_blank&quot;&gt;magenta.js&lt;/a&gt; API to create cool music apps.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: The prerequisites for making an application using Magenta.js include knowledge on HTML, CSS and JavaScript.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;generating-drum-patterns-using-drumsrnn&quot;&gt;Generating Drum Patterns using DrumsRNN&lt;/h3&gt;

&lt;p&gt;In this tutorial, I will show you how to create an intelligent music application that I call &lt;a href=&quot;https://gogul09.github.io/software/deep-drum&quot; target=&quot;_blank&quot;&gt;DeepDrum &amp;amp; DeepArp&lt;/a&gt; using javascript and Google’s magenta.js in the browser. First, we will focus on generating drum patterns using magenta’s &lt;a href=&quot;https://github.com/tensorflow/magenta/tree/master/magenta/models/drums_rnn&quot; target=&quot;_blank&quot;&gt;drums_rnn&lt;/a&gt;. Similar approach is used to create arpeggio patterns using magenta’s &lt;a href=&quot;https://github.com/tensorflow/magenta/tree/master/magenta/models/improv_rnn&quot; target=&quot;_blank&quot;&gt;improv_rnn&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://drive.google.com/uc?id=1ckRXKXQJnjebvlDWM6XKuSaOH6yoJQAm&quot; class=&quot;typical-image&quot; /&gt;
	&lt;figcaption&gt;DeepDrum &amp;amp; DeepArp using Google Magenta's DrumsRnn &amp;amp; ImprovRNN&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The core algorithm behind these two models is the special type Recurrent Neural Network named Long-Short Term Memory network (LSTM). You can read more about the inner workings of an LSTM network in this excellent &lt;a href=&quot;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; by Christopher Olah.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: To include Magenta.js for your music application, you simply need to include the following script in your html &lt;strong&gt;head&lt;/strong&gt; tag.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;index.html&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/@magenta/music@0.0.8/dist/magentamusic.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: A pretrained magenta model can easily be loaded into a javascript environment using the &lt;a href=&quot;https://github.com/tensorflow/magenta-js/blob/master/music/checkpoints/README.md&quot; target=&quot;_blank&quot;&gt;js-checkpoints&lt;/a&gt; (that magenta team has made publicly available) which automatically loads the model along with config files in a single line of code.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drums_rnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MusicRNN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://storage.googleapis.com/download.magenta.tensorflow.org/tfjs_checkpoints/music_rnn/drum_kit_rnn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There is a tradeoff between model package size and accuracy as inference of a pre-trained model is happening live in the browser (client-side).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Next, we need to initialize the model to make use of its methods and attributes.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;drums_rnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Our drum pattern generator will work like this - You provide some random input seed pattern first and the deep neural network (DrumsRNN) will predict the next sequence of patterns.&lt;/p&gt;

&lt;p&gt;We have 10 individual drumkit instrument such as &lt;span class=&quot;coding&quot;&gt;kick&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;snare&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;hihat closed&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;hihat open&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tom low&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tom mid&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tom high&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;clap&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;ride&lt;/span&gt;. Hence, we define an array named &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; to hold the &lt;strong&gt;ON&lt;/strong&gt; time step of each instrument (in an array) at every time step.&lt;/p&gt;

&lt;p&gt;For example, I have initialized the &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; as shown below. This means, for a &lt;span class=&quot;coding&quot;&gt;seed_limit&lt;/span&gt; of 4 time steps, we assign the input pattern like this -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;kick&lt;/span&gt; should be &lt;strong&gt;ON&lt;/strong&gt; at first and third time step.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;snare&lt;/span&gt; shouldn’t be turned &lt;strong&gt;ON&lt;/strong&gt; within &lt;span class=&quot;coding&quot;&gt;seed_limit&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;hihat closed&lt;/span&gt; should be &lt;strong&gt;ON&lt;/strong&gt; only at third time step.&lt;/li&gt;
  &lt;li&gt;and so on..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice we start first time step as 0 in code.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed_pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;seed_limit&lt;/span&gt; defined, we could simply ask our &lt;span class=&quot;coding&quot;&gt;drums_rnn&lt;/span&gt; to continue the sequence for us. Before doing that, we need to be aware of &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantization&quot; target=&quot;_blank&quot;&gt;quantization&lt;/a&gt; of the input values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: To quantize the note sequence, we feed the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; into a javascript object as shown below.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cur_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drum_to_note_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seed_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// drum to note sequence formation&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drum_to_note_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pitch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;midiDrums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantizeNoteSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;ticksPerQuarter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;totalTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;timeSignatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ts_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ts_den&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;tempos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;qpm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tempo&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The way I figured out what’s inside &lt;span class=&quot;coding&quot;&gt;mm.sequences.quantizeNoteSequence&lt;/span&gt; is through the browser’s console and some help by looking at the code of few &lt;a href=&quot;https://magenta.tensorflow.org/demos&quot; target=&quot;_blank&quot;&gt;demos&lt;/a&gt; in Magenta’s website. Values like &lt;span class=&quot;coding&quot;&gt;timeSignatures&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tempos&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;totalTime&lt;/span&gt; need to be set according to one’s preferences. You could even assign these values dynamically.&lt;/p&gt;

&lt;p&gt;The main thing you need to take care here is the conversion of our input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; into musical quantization format that Magenta accepts which includes defining each drumkit instrument’s &lt;span class=&quot;coding&quot;&gt;pitch&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;startTime&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;endTime&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;coding&quot;&gt;pitch&lt;/span&gt; of a drumkit note is the MIDI value of that note which could be obtained from this &lt;a href=&quot;https://github.com/Gogul09/deep-drum/blob/master/js/mapping.js&quot; target=&quot;_blank&quot;&gt;mapping&lt;/a&gt;. &lt;span class=&quot;coding&quot;&gt;startTime&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;endTime&lt;/span&gt; are quantization values that defines the start and end time for a single note.&lt;/p&gt;

&lt;p&gt;For example, for our first time step, &lt;span class=&quot;coding&quot;&gt;kick&lt;/span&gt; will have the following values.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;pitch&lt;/span&gt; - 36&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;startTime&lt;/span&gt; - 0&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;endTime&lt;/span&gt; - 0.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Once you have encoded the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; to Magenta’s quantization format, you can ask &lt;span class=&quot;coding&quot;&gt;drums_rnn&lt;/span&gt; to continue the sequence as shown below.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temperature_drum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;predicted_sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drums_rnn&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;continueSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cur_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temperature_drum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_to_drum_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// note to drum sequence formation&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;note_to_drum_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;empty_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;empty_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantizedStartStep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantizedStartStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverseMidiMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;First, we use &lt;span class=&quot;coding&quot;&gt;continueSequence()&lt;/span&gt; function of &lt;span class=&quot;coding&quot;&gt;drums_rnn&lt;/span&gt; to predict the next sequence values for all our drumkit instruments and store it in a variable named &lt;span class=&quot;coding&quot;&gt;predicted_sequence&lt;/span&gt;. These predictions will be based on the same old magenta’s quantization format having MIDI-mapped pitch values, start time and end time.&lt;/p&gt;

&lt;p&gt;We define an array named &lt;span class=&quot;coding&quot;&gt;res&lt;/span&gt; and store the predicted sequence values based on its &lt;span class=&quot;coding&quot;&gt;quantizedStartStep&lt;/span&gt;. We then concatenate the predicted sequence with the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; to generate a beat!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;These are the core steps involved in using Google Magenta’s pretrained model to generate sequences for music generation. You can use the same steps to generate arpeggio patterns using &lt;a href=&quot;https://github.com/tensorflow/magenta/tree/master/magenta/models/improv_rnn&quot; target=&quot;_blank&quot;&gt;improv_rnn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check the entire code that I have used to build this music application &lt;a href=&quot;https://github.com/Gogul09/deep-drum&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: If you still don't understand the steps mentioned here, I highly encourage you to do &lt;span class=&quot;coding&quot;&gt;console.log()&lt;/span&gt; at each step of the code and understand the steps completely.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cool-demos&quot;&gt;Cool Demos&lt;/h3&gt;

&lt;p&gt;People working in this domain are musicians, artists, creative coders, programmers and researchers who have built extremely amazing demos that you can find &lt;a href=&quot;https://magenta.tensorflow.org/demos&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://aijs.rocks/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://magenta.tensorflow.org/js-announce&quot; target=&quot;_blank&quot;&gt;Magenta.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/tfjs/blob/master/GALLERY.md&quot; target=&quot;_blank&quot;&gt;TensorFlow.js Gallery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GJfjKdpmN6g&quot; target=&quot;_blank&quot;&gt;Music and AI in the Browser with TensorFlow js and Magenta js – Tero Parviainen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HKRJuz6o2uY&quot; target=&quot;_blank&quot;&gt;Musical Deep Neural Networks in the Browser by Tero Parviainen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FgoVL3A6RCo&quot; target=&quot;_blank&quot;&gt;AI JavaScript Rocks - Asim Hussain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">Follow @Gogul09 Fork Star X Contents Why Music and ML? Why browser for ML? Using Magenta's Pre-trained Models Generating Drum Patterns using DrumsRNN Cool Demos Resources After the introduction of Google’s TensorFlow.js, it has become a lot easier to make use of browser (client-side) to do Deep learning. There are handy approaches (as discussed here) on deploying deep learning models using Keras and TensorFlow.js. Note: To learn more about TensorFlow.js and its applications, kindly visit this link. Why Music and ML? Music generation has already began to catch the eyes of machine learning devs and there are numerous projects that are getting pushed in GitHub every week. Although there exist a barrier between AI Researchers and AI Developers such as complex mathematics that involve derivations and jargons, there is still hope for an AI enthusiast to use code and some music knowledge to create exciting applications that was a dream few years back. Leveraging the capabilities of TensorFlow.js, we now have Google’s Magenta.js using which any developer with knowledge on javascript and music could create a music application that has intelligence built in to it. I loved the concept behind Google’s Magenta team. When a painter creates a work of art, she first blends and explores color options on an artist’s palette before applying them to the canvas. This process is a creative act in its own right and has a profound effect on the final work. Musicians and composers have mostly lacked a similar device for exploring and mixing musical ideas, but we are hoping to change that - Read more Why browser for ML? Although one might feel that browsers are light-weight apps that wont handle data intensive algorithms such as deep neural networks, by leveraging the capabilities of WebGL in browsers such as Google Chrome, we could create, train and deploy deep neural net models right in the browser itself without any server requests. Another advantage of using browser to create AI applications is that you could easily send your creations to your friends or family using nothing more than a simple link! Using Magenta's Pre-trained Models Magenta.js is a javascript library that is built on top of TensorFlow.js which provides music oriented abstraction for developers. Google’s Magenta Team research, create and train deep learning models such as Long-Short Term Memory nets (LSTMs), Variational Auto-Encoders (VAE) etc., for music generation, and serve those models as pre-trained models for an AI enthusiast like me to use it for free. By using a pre-trained magenta model, we could build creative music applications in the browser using deep learning. Some of the note-based music models that are provided by Magenta are MusicVAE, MelodyRNN, DrumsRNN and ImprovRNN. Using these pretrained models, we could use their magenta.js API to create cool music apps. Note: The prerequisites for making an application using Magenta.js include knowledge on HTML, CSS and JavaScript. Generating Drum Patterns using DrumsRNN In this tutorial, I will show you how to create an intelligent music application that I call DeepDrum &amp;amp; DeepArp using javascript and Google’s magenta.js in the browser. First, we will focus on generating drum patterns using magenta’s drums_rnn. Similar approach is used to create arpeggio patterns using magenta’s improv_rnn. DeepDrum &amp;amp; DeepArp using Google Magenta's DrumsRnn &amp;amp; ImprovRNN The core algorithm behind these two models is the special type Recurrent Neural Network named Long-Short Term Memory network (LSTM). You can read more about the inner workings of an LSTM network in this excellent blog post by Christopher Olah. Step 1: To include Magenta.js for your music application, you simply need to include the following script in your html head tag. codeindex.html 1&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/@magenta/music@0.0.8/dist/magentamusic.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Step 2: A pretrained magenta model can easily be loaded into a javascript environment using the js-checkpoints (that magenta team has made publicly available) which automatically loads the model along with config files in a single line of code. codeapp.js 1let drums_rnn = mm.MusicRNN(&quot;https://storage.googleapis.com/download.magenta.tensorflow.org/tfjs_checkpoints/music_rnn/drum_kit_rnn&quot;); There is a tradeoff between model package size and accuracy as inference of a pre-trained model is happening live in the browser (client-side). Step 3: Next, we need to initialize the model to make use of its methods and attributes. codeapp.js 1drums_rnn.initialize(); Step 4: Our drum pattern generator will work like this - You provide some random input seed pattern first and the deep neural network (DrumsRNN) will predict the next sequence of patterns. We have 10 individual drumkit instrument such as kick, snare, hihat closed, hihat open, tom low, tom mid, tom high, clap and ride. Hence, we define an array named seed_pattern to hold the ON time step of each instrument (in an array) at every time step. For example, I have initialized the seed_pattern as shown below. This means, for a seed_limit of 4 time steps, we assign the input pattern like this - kick should be ON at first and third time step. snare shouldn’t be turned ON within seed_limit. hihat closed should be ON only at third time step. and so on.. Notice we start first time step as 0 in code. codeapp.js 1 2 3 4 5 6 7 8 9 10 11 12var seed_pattern = [ [0, 2], [], [2], [], [2], [], [0, 2], [], [1, 2], [] ]; With the input seed_pattern and seed_limit defined, we could simply ask our drums_rnn to continue the sequence for us. Before doing that, we need to be aware of quantization of the input values. Step 5: To quantize the note sequence, we feed the input seed_pattern into a javascript object as shown below. codeapp.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43let cur_seq = drum_to_note_sequence(seed_pattern); //--------------------------------- // drum to note sequence formation //--------------------------------- function drum_to_note_sequence(quantize_tensor) { var notes_array = []; var note_index = 0; for (var i = 0; i &amp;lt; quantize_tensor.length; i++) { var notes = quantize_tensor[i]; if(notes.length &amp;gt; 0) { for (var j = 0; j &amp;lt; notes.length; j++) { notes_array[note_index] = {}; notes_array[note_index][&quot;pitch&quot;] = midiDrums[notes[j]]; notes_array[note_index][&quot;startTime&quot;] = i * 0.5; notes_array[note_index][&quot;endTime&quot;] = (i+1) * 0.5; note_index = note_index + 1; } } } return mm.sequences.quantizeNoteSequence( { ticksPerQuarter: 220, totalTime: quantize_tensor.length / 2, timeSignatures: [ { time: 0, numerator: ts_num, denominator: ts_den } ], tempos: [ { time: 0, qpm: tempo } ], notes: notes_array }, 1 ); } The way I figured out what’s inside mm.sequences.quantizeNoteSequence is through the browser’s console and some help by looking at the code of few demos in Magenta’s website. Values like timeSignatures, tempos and totalTime need to be set according to one’s preferences. You could even assign these values dynamically. The main thing you need to take care here is the conversion of our input seed_pattern into musical quantization format that Magenta accepts which includes defining each drumkit instrument’s pitch, startTime and endTime. pitch of a drumkit note is the MIDI value of that note which could be obtained from this mapping. startTime and endTime are quantization values that defines the start and end time for a single note. For example, for our first time step, kick will have the following values. pitch - 36 startTime - 0 endTime - 0.5 Step 6: Once you have encoded the input seed_pattern to Magenta’s quantization format, you can ask drums_rnn to continue the sequence as shown below. codeapp.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21const player_length = 32; const temperature_drum = 1; predicted_sequence = await drums_rnn .continueSequence(cur_seq, player_length, temperature_drum) .then(r =&amp;gt; seed_pattern.concat(note_to_drum_sequence(r, player_length))); //--------------------------------- // note to drum sequence formation //--------------------------------- function note_to_drum_sequence(seq, pLength) { let res = []; for (var i = 0; i &amp;lt; pLength; i++) { empty_list = []; res.push(empty_list); } for (let { pitch, quantizedStartStep } of seq.notes) { res[quantizedStartStep].push(reverseMidiMapping.get(pitch)); } return res; } First, we use continueSequence() function of drums_rnn to predict the next sequence values for all our drumkit instruments and store it in a variable named predicted_sequence. These predictions will be based on the same old magenta’s quantization format having MIDI-mapped pitch values, start time and end time. We define an array named res and store the predicted sequence values based on its quantizedStartStep. We then concatenate the predicted sequence with the input seed_pattern to generate a beat! These are the core steps involved in using Google Magenta’s pretrained model to generate sequences for music generation. You can use the same steps to generate arpeggio patterns using improv_rnn. You can check the entire code that I have used to build this music application here. Note: If you still don't understand the steps mentioned here, I highly encourage you to do console.log() at each step of the code and understand the steps completely. Cool Demos People working in this domain are musicians, artists, creative coders, programmers and researchers who have built extremely amazing demos that you can find here and here. Resources Magenta.js TensorFlow.js Gallery Music and AI in the Browser with TensorFlow js and Magenta js – Tero Parviainen Musical Deep Neural Networks in the Browser by Tero Parviainen AI JavaScript Rocks - Asim Hussain</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1E2EnKkzV1NTJzj2NnDPOsCm3pT0sv1NG" /></entry><entry><title type="html">Power Reduction Techniques in ASIC Design</title><link href="http://localhost:4000/hardware/power-reduction-techniques-in-asic-design" rel="alternate" type="text/html" title="Power Reduction Techniques in ASIC Design" /><published>2018-12-01T00:00:00+05:30</published><updated>2018-12-01T00:00:00+05:30</updated><id>http://localhost:4000/hardware/power-reduction-techniques-in-asic-design</id><content type="html" xml:base="http://localhost:4000/hardware/power-reduction-techniques-in-asic-design">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#power-domains&quot;&gt;Power Domains&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#voltage-islands&quot;&gt;Voltage Islands&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#power-management-cells&quot;&gt;Power Management Cells&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#power-management-unit&quot;&gt;Power Management Unit&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#advanced-low-power-techniques&quot;&gt;Advanced Low Power Techniques&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#esd-cells&quot;&gt;ESD Cells&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_7&quot; href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;When it comes to reducing power dissipation in a chip, there are different techniques followed in industry at different levels of abstraction (circuit-level, logic-level, physical-level etc.,). In this blog post, we will focus on physical-level power management techniques and industry jargons related to power management in chip design.&lt;/p&gt;

&lt;p&gt;Before proceeding with this tutorial, kindly read &lt;a href=&quot;https://gogul09.github.io/hardware/power-distribution-network-in-asic-physical-design&quot; target=&quot;_blank&quot;&gt;Power Distribution Network in ASIC Physical Design&lt;/a&gt; so that you get to know some of the basic concepts needed to understand the concepts that we will discuss in this tutorial.&lt;/p&gt;

&lt;div class=&quot;objectives&quot;&gt;
  &lt;h3&gt;Objectives&lt;/h3&gt;
  &lt;p&gt;After reading this tutorial, we will understand&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;What are power domains?&lt;/li&gt;
    &lt;li&gt;What are voltage islands?&lt;/li&gt;
    &lt;li&gt;What are power management cells?&lt;/li&gt;
    &lt;li&gt;What is a power management unit?&lt;/li&gt;
    &lt;li&gt;What are ESD cells?&lt;/li&gt;
    &lt;li&gt;What are some of the advanced low power techniques?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;power-domains&quot;&gt;Power Domains&lt;/h3&gt;
&lt;p&gt;Imagine we have four IPs (blocks or hard-macros) of different functionality in a chip. Let’s say &lt;span class=&quot;coding&quot;&gt;IP1&lt;/span&gt; is a CPU, &lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt; is a Graphic Processor, &lt;span class=&quot;coding&quot;&gt;IP3&lt;/span&gt; is an Audio Processor and &lt;span class=&quot;coding&quot;&gt;IP4&lt;/span&gt; is a Power Management Unit (mixed signal). Based on its functionality, we can say that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;IP1&lt;/span&gt; is a &lt;strong&gt;timing-critical&lt;/strong&gt; block and operates at highest frequency as it’s the CPU. Let’s say it operates at 1.2V.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;IP3&lt;/span&gt; are &lt;strong&gt;switchable&lt;/strong&gt; blocks i.e. we can switch off power to these blocks to save some power. Let’s assume these two operates at 1.5V.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;IP4&lt;/span&gt; is an &lt;strong&gt;always ON&lt;/strong&gt; block that needs to be ON all the time as it manages the power supply. Let’s say it operates at 3.1V.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1xj9hjf0jS1mDQ4v6_iUQKDuE8hRcakvD&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 1. Power Domains (Multi-voltage design)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A power domain is a &lt;strong&gt;logical&lt;/strong&gt; (virtual) portion of the design in which the logic cells in that power domain share common power supply characteristics. Each hierarchical cell in the design can belong to only one power domain.&lt;/p&gt;

&lt;p&gt;Defining power domains on logical hierarchical boundaries is the ideal and preferred approach instead of defining power domains for logical hierarchies that are different.&lt;/p&gt;

&lt;p&gt;In our case, &lt;span class=&quot;coding&quot;&gt;IP1&lt;/span&gt; belongs to &lt;span class=&quot;coding&quot;&gt;PD1&lt;/span&gt; (or Power Domain 1), &lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt; belongs to &lt;span class=&quot;coding&quot;&gt;PD2&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;IP3&lt;/span&gt; belongs to &lt;span class=&quot;coding&quot;&gt;PD3&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;IP4&lt;/span&gt; belongs to &lt;span class=&quot;coding&quot;&gt;PD4&lt;/span&gt; (each power domain shown in different colors in Figure 1).&lt;/p&gt;

&lt;p&gt;Also note that, a power domain is purely logical and not physical. To realize power domains physically, we define &lt;strong&gt;voltage islands&lt;/strong&gt; or &lt;strong&gt;voltage areas&lt;/strong&gt; in the physical layout.&lt;/p&gt;

&lt;h3 id=&quot;voltage-islands&quot;&gt;Voltage Islands&lt;/h3&gt;
&lt;p&gt;Voltage island is a physical realization of a power domain in a design. In our case, all the different IPs will have their dedicated rectilinear coordinates that defines the island boundaries, power mesh structure and switching characteristics of each power domain, respectively (as shown in Figure 1). Power mesh and switching characteristics for &lt;span class=&quot;coding&quot;&gt;IP1&lt;/span&gt; can be different than other IPs and vice-versa.&lt;/p&gt;

&lt;p&gt;Logic cells that talk within their own power domain has no power constraint. But cells that have signals that communicate from one power domain to another, say &lt;span class=&quot;coding&quot;&gt;IP1&lt;/span&gt; to &lt;span class=&quot;coding&quot;&gt;IP3&lt;/span&gt; requires special power management cells such as isolation cells and level shifters.&lt;/p&gt;

&lt;h3 id=&quot;power-management-cells&quot;&gt;Power Management Cells&lt;/h3&gt;

&lt;p&gt;To reduce power consumption and to protect interfaces between power domains, there are special types of standard cells defined in library such as isolation cells, level shifters, retention registers, power switch and always ON buffers as shown in Figure 2.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1aqYbDcGJGHs9LqLWRfyH3sxc1O6CWSi0&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 2. Power management cells to reduce power consumption&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;level-shifters&quot;&gt;Level Shifters&lt;/h4&gt;

&lt;p&gt;If a signal from &lt;span class=&quot;coding&quot;&gt;IP1&lt;/span&gt; talks to &lt;span class=&quot;coding&quot;&gt;IP3&lt;/span&gt;, we need a level shifter which shifts this signal’s voltage level from &lt;strong&gt;2V&lt;/strong&gt; to &lt;strong&gt;1.5V&lt;/strong&gt;. Level shifters are special power management cells that has two power supply nets.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Input supply net - connected to the voltage supply of driver’s power domain.&lt;/li&gt;
  &lt;li&gt;Output supply net - connected to the voltage supply of receiver’s power domain.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are two types of level shifters namely buffer-type level shifters and enable level shifters. Level shifters must be checked for proper drive strength and accurate timing as signals are transitioned from one voltage level to another voltage level.&lt;/p&gt;

&lt;h4 id=&quot;isolation-cells&quot;&gt;Isolation Cells&lt;/h4&gt;

&lt;p&gt;If a signal from switchable &lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt; block talks to always ON &lt;span class=&quot;coding&quot;&gt;IP4&lt;/span&gt; block, then if &lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt; is powered off, all the outputs of &lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt; power domain will be in an unknown state &lt;strong&gt;X&lt;/strong&gt;. Thus, we need to properly &lt;strong&gt;isolate&lt;/strong&gt; these unknown output &lt;strong&gt;X&lt;/strong&gt; values to protect always ON power domain &lt;span class=&quot;coding&quot;&gt;IP4&lt;/span&gt;. Connecting a shut-down logic and active logic can also cause design issues such as spurious signal propagation and crow-bar current.&lt;/p&gt;

&lt;p&gt;Thus, isolation cells are added to the switchable power domain &lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt;. These isolation cells are AND/OR gates where one input is the output of a cell in switchable domain (which might cause &lt;strong&gt;X&lt;/strong&gt; propagation) and other input is a controlling value (from always ON domain) to prevent unknown state propagation to always ON domain.&lt;/p&gt;

&lt;h4 id=&quot;power-switches&quot;&gt;Power Switches&lt;/h4&gt;

&lt;p&gt;As shrinking technology node increases leakage power, we need power switches to turn off power to CMOS transistors when they aren’t switching. When the logic in a power domain is inactive, we can turn off the power to this power domain using a power switch to save leakage power.&lt;/p&gt;

&lt;p&gt;Power switches are added between the main supply and the virtual supply to be shutdown. The virtual supply is the power supply to standard cell supply rails.&lt;/p&gt;

&lt;h4 id=&quot;retention-registers&quot;&gt;Retention Registers&lt;/h4&gt;

&lt;p&gt;There are cases in which you wish to retain the states of sequential cells in a switchable power domain, say &lt;span class=&quot;coding&quot;&gt;IP2&lt;/span&gt;, even when its turned off. To retain the state values of sequential elements, retention registers are used.&lt;/p&gt;

&lt;p&gt;These registers hold the state of sequential cells in that power domain even when power is turned off. In layout, it’s viewed like randomly glowing bulbs in darkness.&lt;/p&gt;

&lt;p&gt;One tradeoff in using retention registers is that it needs extra area as well as extra routing resources (power + signal) in the design.&lt;/p&gt;

&lt;h4 id=&quot;always-on-buffers&quot;&gt;Always ON buffers&lt;/h4&gt;

&lt;p&gt;When power is turned off for a switchable domain, say &lt;span class=&quot;coding&quot;&gt;IP3&lt;/span&gt;, there might be cases where some logic needs to be active during shutdown. These logic includes control signals to retention registers or power switches as well as enable signals to isolation cells or level shifters. Sometimes it could also be signals in the feedthrough paths that travel from one power domain to another.&lt;/p&gt;

&lt;p&gt;In these cases, always ON buffers or inverters are used which remain active during shutdown. There are two types of always ON cells such as&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Single rail always ON cells&lt;/li&gt;
  &lt;li&gt;Dual rail always ON cells&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;power-management-unit&quot;&gt;Power Management Unit (PMU)&lt;/h3&gt;

&lt;p&gt;Multi-supply voltage techniques (using power domains) as discussed above can reduce power consumption of a chip as not all the blocks in the design needs exact power supply from a battery (most blocks are made switchable). If we have multi-supply voltage values for each power domain in our design, how does the single power supply that comes out from our battery gets transformed into different voltage levels?&lt;/p&gt;

&lt;p&gt;The answer is &lt;strong&gt;Power Management Unit (PMU)&lt;/strong&gt; or &lt;strong&gt;Power Management Integrated Circuit (PMIC)&lt;/strong&gt; - &lt;a href=&quot;https://en.wikipedia.org/wiki/Power_management_integrated_circuit&quot; target=&quot;_blank&quot;&gt;[wikipedia]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A dedicated power management unit takes in single power supply from our battery and produces the necessary voltage levels needed for the design. This PMU can be a part of a chip (such as &lt;span class=&quot;coding&quot;&gt;IP4&lt;/span&gt;) or outside the chip (a dedicated IC called PMIC) depending on packaging and cost requirements.&lt;/p&gt;

&lt;p&gt;A typical power distribution network for a smartphone or tablet or any other gadget uses a PMU or a PMIC to convert single battery power supply into different block-level power supplies which is controlled by the operating system through I2C or any other protocol as shown in Figure 3.&lt;/p&gt;

&lt;p&gt;Two main components in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Power_management_integrated_circuit&quot; target=&quot;_blank&quot;&gt;PMIC&lt;/a&gt; are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/DC-to-DC_converter&quot; target=&quot;_blank&quot;&gt;DC-DC converter&lt;/a&gt;, an electronic circuit that converts a source of Direct Current (DC) from one voltage level to another.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-dropout_regulator&quot; target=&quot;_blank&quot;&gt;Low Dropout Regulator&lt;/a&gt;, a linear DC electronic circuit that can regulate the output voltage i.e. make the output voltage steady.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on the functionality, DC-DC converters are further divided into&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Buck converters (Step-Down)&lt;/li&gt;
  &lt;li&gt;Boost converters (Step-Up)&lt;/li&gt;
  &lt;li&gt;Buck-Boost converters&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1zEiAP5_7NjbVpt01zbE-7Fq3ZRpxbFAl&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 3. Power Distribution Network in a smartphone&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;advanced-low-power-techniques&quot;&gt;Advanced Low Power Techniques&lt;/h3&gt;

&lt;p&gt;Some of the commonly used advanced low power techniques to reduce power consumption in CMOS are shown in Figure 4. All the below mentioned advanced power optimization techniques require knowledge of something called as &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Power_Format&quot; target=&quot;_blank&quot;&gt;UPF&lt;/a&gt; or Unified Power Format which is the IEEE standard followed in industries to specify power intent of a design. We will learn about UPF in a separate blog post.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1Sst6kPRCsc3r0_A1ia_VyEeNz386iwxV&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 4. Advanced Low Power Techniques&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;1-multi-voltage-design&quot;&gt;1. Multi-voltage design&lt;/h4&gt;

&lt;p&gt;This technique assigns different voltages (power domains) for different regions in the design where these different voltages levels are obtained or controlled using a PMIC or PMU. The interfaces between different power domains need to be managed using level shifters and/or isolation cells. This technique reduces dynamic power.&lt;/p&gt;

&lt;h4 id=&quot;2-power-gating-shutdown&quot;&gt;2. Power Gating (Shutdown)&lt;/h4&gt;

&lt;p&gt;This technique uses a single voltage throughout the design with switchable regions which can be turned off to reduce power. Switching off and switching on power requires power switches which are MTCMOS cells which uses LVT during normal mode (to reduce short circuit power) and uses HVT during off mode (to reduce leakage power).&lt;/p&gt;

&lt;p&gt;Again these power switches requires control signals from a PMIC or PMU. This technique greatly reduces leakage power as some blocks are completely switched off when their functionality is not needed.&lt;/p&gt;

&lt;p&gt;Due to higher load in multi-million instance based design, large amount of inrush current flows to charge the internal capacitors. To reduce this inrush current, power switches are placed in a daisy chain like arrangement.&lt;/p&gt;

&lt;h4 id=&quot;3-multi-voltage--power-gating-shutdown-with-state-retention&quot;&gt;3. Multi-voltage + Power Gating (Shutdown) with State Retention&lt;/h4&gt;

&lt;p&gt;This technique combines the above two approach with &lt;strong&gt;state retention registers&lt;/strong&gt; in the switchable regions of the design. This is the most commonly used approach to reduce power consumption of a chip. This techniques reduces both dynamic and leakage power.&lt;/p&gt;

&lt;p&gt;Furthermore, from a physical design perspective, the power grid in top-level needs to be aligned with the power grid in block-level. This needs proper selection of pitch, width and spacing between metals in the power grid. Due to these constraints, there is &lt;strong&gt;IR drop&lt;/strong&gt; in each block and so, power analysis (static + dynamic) needs to be clean at these blocks for signoff - &lt;a href=&quot;https://www.edn.com/design/integrated-circuit-design/4440822/SoC-PDN-challenges-and-solutions&quot; target=&quot;_blank&quot;&gt;read more&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;4-dynamic-voltage--frequency-scaling-dvfs&quot;&gt;4. Dynamic Voltage &amp;amp; Frequency Scaling (DVFS)&lt;/h4&gt;

&lt;p&gt;This technique uses a separate control unit to control power to different regions in a design so that voltage levels are adjusted dynamically or adaptively based on functionality. Again there is a tradeoff in area for the power control circuitry. Apart from adjusting voltage levels, frequency can also be dynamically adjusted where performance is not a priority, thereby saving some power.&lt;/p&gt;

&lt;h3 id=&quot;esd-cells&quot;&gt;ESD Cells&lt;/h3&gt;

&lt;p&gt;Due to shrinking feature sizes and increasing metal layer stack, Electro-Static Discharge (ESD) has become another major concern for low-power VLSI designs. Due to static electricity that could be produced in any uncontrollable exposed environment such as Human Body Interaction (HBM), Machine Handling (MH) or from internal build-up of charge leaving through the package (CDM or Charged Device Model), chip shouldn’t get exposed and affected due to these factors.&lt;/p&gt;

&lt;p&gt;ESD or Electro-Static Discharge cells are &lt;strong&gt;clamp circuits&lt;/strong&gt; that are placed at appropriate locations inside the chip to provide a low impedance discharge path for the ESD current, handle large transient current and clamp the signal voltage at a level that avoids dielectic breakdown. In modern chip design, ESD cells are mandatory to avoid functional failure or burn out of the chip.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ansys.com/en-in/products/semiconductors/ansys-redhawk&quot; target=&quot;_blank&quot;&gt;Apache RedHawk&lt;/a&gt; is the industry standard tool to comprehensively analyse, plan and verify ESD at full chip-level that ensures connectivity between any two pins meets design guidelines. &lt;a href=&quot;https://www.apache-da.com/products/redhawk/pathfinder&quot; target=&quot;_blank&quot;&gt;Apache’s PathFinder&lt;/a&gt; is capable of performing ESD connectivity analysis for HBM, MM and CDM ESD events and predicts the current density in all metal wires and vias - &lt;a href=&quot;https://www.semiwiki.com/forum/content/2933-full-chip-esd-sign-off-necessary.html&quot; target=&quot;_blank&quot;&gt;read more&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://semiengineering.com/power-intent-formats-power-domain/&quot; target=&quot;_blank&quot;&gt;Power Intent Formats: Power Domain&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vlsi-soc.blogspot.com/2017/02/power-domain-crossings.html&quot; target=&quot;_blank&quot;&gt;Power Domain Crossings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://semiengineering.com/knowledge_centers/low-power/techniques/voltage-islands/&quot; target=&quot;_blank&quot;&gt;Voltage Islands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_management_integrated_circuit&quot; target=&quot;_blank&quot;&gt;Power management integrated circuit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aOLPIFNESgg&quot; target=&quot;_blank&quot;&gt;Power Management Cells&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4asqcmyavos&quot; target=&quot;_blank&quot;&gt;Power Domains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GsDWgm0YiaU&quot; target=&quot;_blank&quot;&gt;Power Management Integrated Circuits: Keep the Power in Your Hands - Quentin Schulz, Free Electrons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.semiwiki.com/forum/content/546-electro-static-discharge-lesdl.html&quot; target=&quot;_blank&quot;&gt;Electro-static Discharge (ESD)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mMwwoFtuQKE&amp;amp;list=PL602848A2E518E963&amp;amp;index=8&quot; target=&quot;_blank&quot;&gt;Advanced Low Power Terminology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gogul Ilango</name></author><category term="hardware" /><summary type="html">X Contents Power Domains Voltage Islands Power Management Cells Power Management Unit Advanced Low Power Techniques ESD Cells References When it comes to reducing power dissipation in a chip, there are different techniques followed in industry at different levels of abstraction (circuit-level, logic-level, physical-level etc.,). In this blog post, we will focus on physical-level power management techniques and industry jargons related to power management in chip design. Before proceeding with this tutorial, kindly read Power Distribution Network in ASIC Physical Design so that you get to know some of the basic concepts needed to understand the concepts that we will discuss in this tutorial. Objectives After reading this tutorial, we will understand What are power domains? What are voltage islands? What are power management cells? What is a power management unit? What are ESD cells? What are some of the advanced low power techniques? Power Domains Imagine we have four IPs (blocks or hard-macros) of different functionality in a chip. Let’s say IP1 is a CPU, IP2 is a Graphic Processor, IP3 is an Audio Processor and IP4 is a Power Management Unit (mixed signal). Based on its functionality, we can say that IP1 is a timing-critical block and operates at highest frequency as it’s the CPU. Let’s say it operates at 1.2V. IP2 and IP3 are switchable blocks i.e. we can switch off power to these blocks to save some power. Let’s assume these two operates at 1.5V. IP4 is an always ON block that needs to be ON all the time as it manages the power supply. Let’s say it operates at 3.1V. Figure 1. Power Domains (Multi-voltage design) A power domain is a logical (virtual) portion of the design in which the logic cells in that power domain share common power supply characteristics. Each hierarchical cell in the design can belong to only one power domain. Defining power domains on logical hierarchical boundaries is the ideal and preferred approach instead of defining power domains for logical hierarchies that are different. In our case, IP1 belongs to PD1 (or Power Domain 1), IP2 belongs to PD2, IP3 belongs to PD3 and IP4 belongs to PD4 (each power domain shown in different colors in Figure 1). Also note that, a power domain is purely logical and not physical. To realize power domains physically, we define voltage islands or voltage areas in the physical layout. Voltage Islands Voltage island is a physical realization of a power domain in a design. In our case, all the different IPs will have their dedicated rectilinear coordinates that defines the island boundaries, power mesh structure and switching characteristics of each power domain, respectively (as shown in Figure 1). Power mesh and switching characteristics for IP1 can be different than other IPs and vice-versa. Logic cells that talk within their own power domain has no power constraint. But cells that have signals that communicate from one power domain to another, say IP1 to IP3 requires special power management cells such as isolation cells and level shifters. Power Management Cells To reduce power consumption and to protect interfaces between power domains, there are special types of standard cells defined in library such as isolation cells, level shifters, retention registers, power switch and always ON buffers as shown in Figure 2. Figure 2. Power management cells to reduce power consumption Level Shifters If a signal from IP1 talks to IP3, we need a level shifter which shifts this signal’s voltage level from 2V to 1.5V. Level shifters are special power management cells that has two power supply nets. Input supply net - connected to the voltage supply of driver’s power domain. Output supply net - connected to the voltage supply of receiver’s power domain. There are two types of level shifters namely buffer-type level shifters and enable level shifters. Level shifters must be checked for proper drive strength and accurate timing as signals are transitioned from one voltage level to another voltage level. Isolation Cells If a signal from switchable IP2 block talks to always ON IP4 block, then if IP2 is powered off, all the outputs of IP2 power domain will be in an unknown state X. Thus, we need to properly isolate these unknown output X values to protect always ON power domain IP4. Connecting a shut-down logic and active logic can also cause design issues such as spurious signal propagation and crow-bar current. Thus, isolation cells are added to the switchable power domain IP2. These isolation cells are AND/OR gates where one input is the output of a cell in switchable domain (which might cause X propagation) and other input is a controlling value (from always ON domain) to prevent unknown state propagation to always ON domain. Power Switches As shrinking technology node increases leakage power, we need power switches to turn off power to CMOS transistors when they aren’t switching. When the logic in a power domain is inactive, we can turn off the power to this power domain using a power switch to save leakage power. Power switches are added between the main supply and the virtual supply to be shutdown. The virtual supply is the power supply to standard cell supply rails. Retention Registers There are cases in which you wish to retain the states of sequential cells in a switchable power domain, say IP2, even when its turned off. To retain the state values of sequential elements, retention registers are used. These registers hold the state of sequential cells in that power domain even when power is turned off. In layout, it’s viewed like randomly glowing bulbs in darkness. One tradeoff in using retention registers is that it needs extra area as well as extra routing resources (power + signal) in the design. Always ON buffers When power is turned off for a switchable domain, say IP3, there might be cases where some logic needs to be active during shutdown. These logic includes control signals to retention registers or power switches as well as enable signals to isolation cells or level shifters. Sometimes it could also be signals in the feedthrough paths that travel from one power domain to another. In these cases, always ON buffers or inverters are used which remain active during shutdown. There are two types of always ON cells such as Single rail always ON cells Dual rail always ON cells Power Management Unit (PMU) Multi-supply voltage techniques (using power domains) as discussed above can reduce power consumption of a chip as not all the blocks in the design needs exact power supply from a battery (most blocks are made switchable). If we have multi-supply voltage values for each power domain in our design, how does the single power supply that comes out from our battery gets transformed into different voltage levels? The answer is Power Management Unit (PMU) or Power Management Integrated Circuit (PMIC) - [wikipedia]. A dedicated power management unit takes in single power supply from our battery and produces the necessary voltage levels needed for the design. This PMU can be a part of a chip (such as IP4) or outside the chip (a dedicated IC called PMIC) depending on packaging and cost requirements. A typical power distribution network for a smartphone or tablet or any other gadget uses a PMU or a PMIC to convert single battery power supply into different block-level power supplies which is controlled by the operating system through I2C or any other protocol as shown in Figure 3. Two main components in a PMIC are DC-DC converter, an electronic circuit that converts a source of Direct Current (DC) from one voltage level to another. Low Dropout Regulator, a linear DC electronic circuit that can regulate the output voltage i.e. make the output voltage steady. Based on the functionality, DC-DC converters are further divided into Buck converters (Step-Down) Boost converters (Step-Up) Buck-Boost converters Figure 3. Power Distribution Network in a smartphone Advanced Low Power Techniques Some of the commonly used advanced low power techniques to reduce power consumption in CMOS are shown in Figure 4. All the below mentioned advanced power optimization techniques require knowledge of something called as UPF or Unified Power Format which is the IEEE standard followed in industries to specify power intent of a design. We will learn about UPF in a separate blog post. Figure 4. Advanced Low Power Techniques 1. Multi-voltage design This technique assigns different voltages (power domains) for different regions in the design where these different voltages levels are obtained or controlled using a PMIC or PMU. The interfaces between different power domains need to be managed using level shifters and/or isolation cells. This technique reduces dynamic power. 2. Power Gating (Shutdown) This technique uses a single voltage throughout the design with switchable regions which can be turned off to reduce power. Switching off and switching on power requires power switches which are MTCMOS cells which uses LVT during normal mode (to reduce short circuit power) and uses HVT during off mode (to reduce leakage power). Again these power switches requires control signals from a PMIC or PMU. This technique greatly reduces leakage power as some blocks are completely switched off when their functionality is not needed. Due to higher load in multi-million instance based design, large amount of inrush current flows to charge the internal capacitors. To reduce this inrush current, power switches are placed in a daisy chain like arrangement. 3. Multi-voltage + Power Gating (Shutdown) with State Retention This technique combines the above two approach with state retention registers in the switchable regions of the design. This is the most commonly used approach to reduce power consumption of a chip. This techniques reduces both dynamic and leakage power. Furthermore, from a physical design perspective, the power grid in top-level needs to be aligned with the power grid in block-level. This needs proper selection of pitch, width and spacing between metals in the power grid. Due to these constraints, there is IR drop in each block and so, power analysis (static + dynamic) needs to be clean at these blocks for signoff - read more. 4. Dynamic Voltage &amp;amp; Frequency Scaling (DVFS) This technique uses a separate control unit to control power to different regions in a design so that voltage levels are adjusted dynamically or adaptively based on functionality. Again there is a tradeoff in area for the power control circuitry. Apart from adjusting voltage levels, frequency can also be dynamically adjusted where performance is not a priority, thereby saving some power. ESD Cells Due to shrinking feature sizes and increasing metal layer stack, Electro-Static Discharge (ESD) has become another major concern for low-power VLSI designs. Due to static electricity that could be produced in any uncontrollable exposed environment such as Human Body Interaction (HBM), Machine Handling (MH) or from internal build-up of charge leaving through the package (CDM or Charged Device Model), chip shouldn’t get exposed and affected due to these factors. ESD or Electro-Static Discharge cells are clamp circuits that are placed at appropriate locations inside the chip to provide a low impedance discharge path for the ESD current, handle large transient current and clamp the signal voltage at a level that avoids dielectic breakdown. In modern chip design, ESD cells are mandatory to avoid functional failure or burn out of the chip. Apache RedHawk is the industry standard tool to comprehensively analyse, plan and verify ESD at full chip-level that ensures connectivity between any two pins meets design guidelines. Apache’s PathFinder is capable of performing ESD connectivity analysis for HBM, MM and CDM ESD events and predicts the current density in all metal wires and vias - read more. References Power Intent Formats: Power Domain Power Domain Crossings Voltage Islands Power management integrated circuit Power Management Cells Power Domains Power Management Integrated Circuits: Keep the Power in Your Hands - Quentin Schulz, Free Electrons Electro-static Discharge (ESD) Advanced Low Power Terminology</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1TsYhJZdSqldmF8aEiM4pMP54EldLgCfb" /></entry><entry><title type="html">Power Distribution Network in ASIC Physical Design</title><link href="http://localhost:4000/hardware/power-distribution-network-in-asic-physical-design" rel="alternate" type="text/html" title="Power Distribution Network in ASIC Physical Design" /><published>2018-10-26T00:00:00+05:30</published><updated>2018-10-26T00:00:00+05:30</updated><id>http://localhost:4000/hardware/power-distribution-network-in-asic-physical-design</id><content type="html" xml:base="http://localhost:4000/hardware/power-distribution-network-in-asic-physical-design">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#power-dissipation&quot;&gt;Power Dissipation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#types-of-power-dissipation&quot;&gt;Types of Power Dissipation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#dynamic-power&quot;&gt;Dynamic Power&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#switching-power&quot;&gt;Switching Power&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#short-circuit-power&quot;&gt;Short-circuit Power&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#static-power&quot;&gt;Static Power&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_7&quot; href=&quot;#what-is-ir-drop&quot;&gt;What is IR drop?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_8&quot; href=&quot;#types-of-ir-drop-analysis&quot;&gt;Types of IR drop analysis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_9&quot; href=&quot;#reasons-for-high-ir-drop&quot;&gt;Reasons for high IR drop&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_10&quot; href=&quot;#tools-for-ir-drop-analysis&quot;&gt;Tools for IR drop analysis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_11&quot; href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Power &amp;amp; Battery life have become very important factors be to considered during chip design as technology node shrinks. For a VLSI Design Engineer, knowledge on power consumption in a CMOS design is crucial as it has become a very big challenge in latest technology nodes.&lt;/p&gt;

&lt;p&gt;Almost any electronic device that you hold in your hand (smartphone, tablet, notebook, laptop etc.,) consume power from a limited power supply (battery). Thus, making the chip consume less power is a mandatory problem to be solved.&lt;/p&gt;

&lt;div class=&quot;objectives&quot;&gt;
  &lt;h3&gt;Objectives&lt;/h3&gt;
  &lt;p&gt;After reading this tutorial, we will understand&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Why power is important in VLSI design?&lt;/li&gt;
    &lt;li&gt;What are the different types of power dissipation?&lt;/li&gt;
    &lt;li&gt;What are switching power, short-circuit power and leakage power?&lt;/li&gt;
    &lt;li&gt;What is IR drop &amp;amp; different types of IR drop?&lt;/li&gt;
    &lt;li&gt;What are the reasons for high IR drop?&lt;/li&gt;
    &lt;li&gt;What are the tools available to analyse IR drop?&lt;/li&gt;
    &lt;li&gt;What are some strategies to reduce power dissipation?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;power-dissipation&quot;&gt;Power Dissipation&lt;/h3&gt;

&lt;p&gt;The process in which a chip produces heat (waste energy) as an unwanted byproduct of its primary action is termed as Power Dissipation. If the chip dissipates power than its maximum limit, it could lead to functionality failure or even burn out. Hence, reducing power dissipation is a necessity in modern semiconductor design due to lower technology nodes, higher frequencies, complex functionalities and portability.&lt;/p&gt;

&lt;p&gt;When dealing with power, we need to take care of modeling our circuits during both logic design phase as well as physical design phase.&lt;/p&gt;

&lt;p&gt;During logic design, industries follow something called as &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Power_Format&quot; target=&quot;_blank&quot;&gt;UPF&lt;/a&gt; (Unified Power Format) to introduce power reduction strategies along with RTL code. We will discuss more about this in future posts.&lt;/p&gt;

&lt;p&gt;During physical design, we build the entire power distribution network in silicon that’s made up of metal layer stack which we will discuss as we proceed in this tutorial. But wait! Let me show you how it looks when we analyze IR drop in power analysis tools such as Apache RedHawk 🙄&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1wwcj27RbP_RRvIo5VF141qTaa6raRa2l&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;[source: &lt;a href=&quot;https://www.apache-da.com/products/redhawk/redhawk-nx050112&quot; target=&quot;_blank&quot;&gt;Apache RedHawk NX&lt;/a&gt;]&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The above image shows the standard IR drop map of a design in Apache RedHawk. A design engineer’s job is to reduce all those regions in red so that power number is within limits.&lt;/p&gt;

&lt;p&gt;Before diving into how do we reduce power dissipation during physical design phase, we need to understand some basic concepts of power.&lt;/p&gt;

&lt;h3 id=&quot;types-of-power-dissipation&quot;&gt;Types of Power Dissipation&lt;/h3&gt;

&lt;p&gt;In a low-power CMOS VLSI design, there are two types of power dissipation.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Static power&lt;/li&gt;
  &lt;li&gt;Dynamic power&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The sources of these power dissipations as well as the techniques to solve them are different. These two types of power dissipation are further classified as shown in Figure 1.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1M1KzqrKbb5k1x_RGBY1-f0QwNbbxd0E3&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 1. Types of Power Dissipation in CMOS&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;dynamic-power&quot;&gt;Dynamic Power&lt;/h3&gt;

&lt;p&gt;As the name suggests, dynamic power dissipation occurs when the transistors are &lt;em&gt;switching&lt;/em&gt; from one logic state to another. There are two types of dynamic power dissipation in CMOS circuits namely&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Switching Power&lt;/li&gt;
  &lt;li&gt;Short-circuit Power&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1ogQcgiT94JbFpybC1qmKT2n_7Lf7IH2_&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 2. Types of Dynamic Power&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;switching-power&quot;&gt;Switching Power&lt;/h4&gt;

&lt;p&gt;When a transistor switch from one logic state to another, the load capacitance at the output pin needs to be &lt;em&gt;charged&lt;/em&gt; or &lt;em&gt;discharged&lt;/em&gt; which is referred as the switching power as shown in Figure 2.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When the output rises, the load capacitance must go from \( V_{SS} \) to \( V_{DD} \).&lt;/li&gt;
  &lt;li&gt;When the output falls, the load capacitance must go from \( V_{DD} \) to \( V_{SS} \).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recall that in basic electronic theory, there is a &lt;em&gt;switching current&lt;/em&gt; associated on charging or discharging the capacitor which is given as \( i = C \frac{dV_{DD}}{dt}\), which further gets multiplied by \( V_{DD} \) to produce power.&lt;/p&gt;

&lt;p&gt;Similarly in CMOS, the average dynamic power (\(P_{dynamic}\)) is given by&lt;/p&gt;

&lt;div class=&quot;math-cover&quot;&gt;
$$
\begin{align}
P_{dynamic} &amp;amp; = \frac{1}{T} \int_0^T i_{DD}(t) V_{DD} dt \\
 &amp;amp; = \frac{V_{DD}}{T} \int_0^T i_{DD}(t) dt \\
 &amp;amp; = \frac{V_{DD}}{T} [T f_{sw} C V_{DD}] \\
 &amp;amp; = C V_{DD}^2 f_{sw}
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;\( f_{sw} \) - frequency of output switching&lt;/li&gt;
  &lt;li&gt;\( C \) - load capacitance&lt;/li&gt;
  &lt;li&gt;\( V_{DD} \) - power supply voltage&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;switching-factor--alpha-&quot;&gt;Switching factor (\( \alpha \))&lt;/h4&gt;

&lt;p&gt;To measure how frequently the output pin of a transistor circuit switches, we define a parameter called switching factor or toggle factor (\( \alpha \)).&lt;/p&gt;

&lt;p&gt;If the frequency of output switching is \(f_{sw}\), then the charging and discharging cycle will repeat \(T * f_{sw}\) times over a time interval \( T \).&lt;/p&gt;

&lt;p&gt;If \( f \) is the clock frequency at which the chip operates, then \( f_{sw} = \alpha * f \).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\( \alpha = 1 \) - if the output pin of a transistor switches with the clock frequency.&lt;/li&gt;
  &lt;li&gt;\( \alpha = \frac{1}{2} \) - if the output pin of a transistor switches once per cycle of the clock frequency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we include this switching factor \( \alpha \) for dynamic power calculation, we get&lt;/p&gt;

&lt;div class=&quot;math-cover&quot;&gt;
$$
\begin{align}
P_{dynamic} &amp;amp; = \alpha C V_{DD}^2 f
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;Thus, we can reduce dynamic power by&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reducing the switching factor \( \alpha \) of the transistor.&lt;/li&gt;
  &lt;li&gt;Reducing the load capacitance \( C \) of the transistor.&lt;/li&gt;
  &lt;li&gt;Reducing the supply voltage \( V_{DD} \) of the transistor.&lt;/li&gt;
  &lt;li&gt;Reducing the clock frequency \( f \) of the transistor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From an physical design implementation perspective,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\( C \) comes from &lt;span class=&quot;coding&quot;&gt;.spef&lt;/span&gt; file of the design.&lt;/li&gt;
  &lt;li&gt;\( V_{DD} \) comes from the chosen &lt;span class=&quot;coding&quot;&gt;corner&lt;/span&gt; of the design.&lt;/li&gt;
  &lt;li&gt;\( \alpha \) comes from either &lt;span class=&quot;coding&quot;&gt;.fsdb&lt;/span&gt; file or &lt;span class=&quot;coding&quot;&gt;.gsc&lt;/span&gt; file of the design.&lt;/li&gt;
  &lt;li&gt;\( f \) comes from timing session of the design.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;short-circuit-power&quot;&gt;Short-circuit Power&lt;/h4&gt;

&lt;p&gt;When a transistor switch from one logic state to another, during the signal transition, there exist a &lt;em&gt;direct path&lt;/em&gt; from \( V_{DD} \) to \( V_{SS} \) which produces short-circuit current \( I_{SC} \) and short-circuit power dissipation. If clock frequency of the design increases, frequency of transition will increase which further increases short circuit power.&lt;/p&gt;

&lt;p&gt;Mathematically, short circuit \( P_{short-circuit} \) power can be written as&lt;/p&gt;

&lt;div class=&quot;math-cover&quot;&gt;
$$
\begin{align}
P_{short-circuit} &amp;amp; = I_{SC} * V_{DD} * f_{sw}
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;\( I_{SC} \) - short circuit current during signal transition&lt;/li&gt;
  &lt;li&gt;\( V_{DD} \) - power supply voltage&lt;/li&gt;
  &lt;li&gt;\( f_{sw} \) - switching frequency&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;static-power&quot;&gt;Static Power&lt;/h3&gt;

&lt;p&gt;As the name suggests, even when the chip is off or quiescent (static), there exists some amount of power dissipation due to transistor’s leakage characteristics giving rise to leakage power. This is due to the characteristic of CMOS transistors itself, which is a function of power supply voltage \( V_{DD} \), threshold voltage \( V_{th} \) and transistor’s dimension (width \(W \) and length \( L \)).&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1eb4MteRTpf_Me3isJDysUSy5CAo5ofjy&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 3. Static or Leakage Power Dissipation&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As we scale down the technology node, &lt;em&gt;leakage power&lt;/em&gt; is becoming a significant contributor in IR drop analysis. Leakage power can further be classified into three types.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Diode leakage&lt;/li&gt;
  &lt;li&gt;Sub-threshold leakage&lt;/li&gt;
  &lt;li&gt;Gate-oxide leakage&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;math-cover&quot;&gt;
$$
\begin{align}
P_{leakage}(V_{DD}, V_{th}, W, L)
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;From a PD implementation perspective, &lt;span class=&quot;coding&quot;&gt;.lib&lt;/span&gt; files of a standard cell contains leakage power related information which is further given to power analysis tools such as Apache RedHawk for power verification.&lt;/p&gt;

&lt;p&gt;You can read more on leakage power &lt;a href=&quot;https://www.youtube.com/watch?v=d0OxV2rA398&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-is-ir-drop&quot;&gt;What is IR drop?&lt;/h3&gt;

&lt;p&gt;In an ASIC, power to different blocks, IO pads, standard cells and macros are provided by the power grid which consists of stack of metal layers (conductors) that run horizontally and vertically in a grid-like fashion over the entire floorplan.&lt;/p&gt;

&lt;p&gt;These stacked metal layers have power stripes such as \( V_{DD} \) and \( V_{SS} \) at regular intervals (pitch) with defined width and thickness, and are connected through vias from one layer to another as shown in Figure 4. This power distribution grid (or network) comprises of power rings, power stripes and power rails that are resistive by nature which creates the IR drop (or voltage drop).&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1IHjxB0TYTvLJk_eE7qppfdZEvg5nOzve&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 4. Metal layer stack (2D &amp;amp; 3D view)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Currently, there are two approaches followed in industry to redistribute power from package to core namely &lt;a href=&quot;https://en.wikipedia.org/wiki/Wire_bonding&quot; target=&quot;_blank&quot;&gt;Wire Bonding&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip_chip&quot; target=&quot;_blank&quot;&gt;Flip-Chip&lt;/a&gt; as shown in Figure 5.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1pNudcK0doHXtomzrx-lhmgK0JBqlbxwD&quot; class=&quot;typical-image&quot; /&gt;
  &lt;figcaption&gt;Figure 5. Wire-bonding and Flip-chip techniques&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In flip-chip designs, as power supply voltage gets redistributed from the IO pads to bump pads (containing C4 bump arrays) via top-layer (or &lt;a href=&quot;https://en.wikipedia.org/wiki/Redistribution_layer&quot; target=&quot;_blank&quot;&gt;Redistribution Layer&lt;/a&gt; or AP layer), different blocks, standard cells and macros receive power after crossing different metal layers from top to bottom till it reaches the layer in which power pins of the instances reside.&lt;/p&gt;

&lt;p&gt;When power supply voltage travels from top-layer (RDL layer) to power pins layer of instances (usually lower layer), there exists drop in the voltage levels due to the resistive nature of these metal layers. As there is resistance in these metal wires, when a voltage is applied, current is produced which further decreases the voltage level reaching the instances which is termed as the IR drop or Voltage drop.&lt;/p&gt;

&lt;p&gt;In addition to the voltage drop that is present in the metal layers stack (on-die), there is also some voltage drop called \( \frac{di}{dt} \) drop (off-die) associated with the package leads which has inductance (and less resistance) associated with it due to the time-varying current.&lt;/p&gt;

&lt;p&gt;Furthermore, the presence of decoupling capacitors near the instances that store charges locally (which might assist in decreasing voltage drop), adds up some load capacitance. This addition of decaps increases leakage power consumption as well as area which further gets added to the equation.&lt;/p&gt;

&lt;p&gt;Thus, we can summarize that the voltage level seen at an instance in the design as&lt;/p&gt;

&lt;div class=&quot;math-cover&quot;&gt;
$$
\begin{align}
V_{instance} = V_{powersupply} - (drop_{metalstack} + drop_{packageleads} + drop_{decaps})
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;From an implementation perspective, if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\( V_{powersupply} = 2V \)&lt;/li&gt;
  &lt;li&gt;\( drop_{metalstack} = 0.2V\)&lt;/li&gt;
  &lt;li&gt;\( drop_{packageleads} = 0.1V \)&lt;/li&gt;
  &lt;li&gt;\( drop_{decaps} = 0.1V \)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then, \( V_{instance} = 1.6V \).&lt;/p&gt;

&lt;p&gt;Any instance in the design will have a maximum voltage drop limit above which it may fail in functionality or timing. So, it’s the job of the engineer to reduce IR drop in the design before tapeout.&lt;/p&gt;

&lt;h3 id=&quot;types-of-ir-drop-analysis&quot;&gt;Types of IR drop analysis&lt;/h3&gt;

&lt;p&gt;There are two standard types of IR drop analysis for a circuit design namely&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Static IR drop&lt;/strong&gt; - Vectorless IR drop analysis with average current cycles. Typically used for Electro-Migration (EM) analysis where current limit is checked for wires.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic IR drop&lt;/strong&gt; - Vectorless or VCD based IR drop analysis with worst-case switching currents. Typically used to check voltage drop limit for switching instances.&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Static IR Drop&lt;/th&gt;
      &lt;th&gt;Dynamic IR Drop&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;All cell instances will draw average current (DC).&lt;/td&gt;
      &lt;td&gt;All switching instances will draw transient current (AC). All non-switching instances will draw only leakage current.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total Average demand will be much lesser than real peak demand current for the design.&lt;/td&gt;
      &lt;td&gt;Real peak demand current is measured and analyzed in dynamic IR.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total demand current is supplied from the power source (battery).&lt;/td&gt;
      &lt;td&gt;Total demand current is supplied from the power source (battery) and some portion of the demand current is supplied by decoupling capacitors near the cell instances.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;All cell instances will draw current all the time. Hence, switching effects are not considered.&lt;/td&gt;
      &lt;td&gt;Switching effects are always considered. All instances draw transient current only during switching. Simultaneous switching causes huge peak demand current.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If package is considered, there is no IR drop due to Ldi/dt effects as current is constant.&lt;/td&gt;
      &lt;td&gt;If package is considered, Ldi/dt effects are considered.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;reasons-for-high-ir-drop&quot;&gt;Reasons for high IR drop&lt;/h3&gt;

&lt;p&gt;Some of the standard reasons for high IR drop in a design are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;High power grid resistance.&lt;/li&gt;
  &lt;li&gt;High current flowing through the power grid.&lt;/li&gt;
  &lt;li&gt;Simultaneous switching of instances at same time.&lt;/li&gt;
  &lt;li&gt;Less amount of decoupling capacitors near the instances.&lt;/li&gt;
  &lt;li&gt;High parasitics in package leads.&lt;/li&gt;
  &lt;li&gt;Lesser length or width of power stripes in RDL layer.&lt;/li&gt;
  &lt;li&gt;Lesser power sources such as power bumps (in flip-chip).&lt;/li&gt;
  &lt;li&gt;Incorrect input files (to power analysis tools) such as &lt;span class=&quot;coding&quot;&gt;.lef&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;.def&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;.lib&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;.spef&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;.sta&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;.ploc&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;APL&lt;/span&gt; files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools-for-ir-drop-analysis&quot;&gt;Tools for IR drop analysis&lt;/h3&gt;

&lt;p&gt;There are different tools available to perform IR drop analysis for a design from physical design perspective. Some of the industry standard tools are &lt;a href=&quot;https://www.ansys.com/products/semiconductors/ansys-redhawk&quot; target=&quot;_blank&quot;&gt;Apache RedHawk&lt;/a&gt; and &lt;a href=&quot;https://www.slideshare.net/AlanTran3/voltagestorm&quot; target=&quot;_blank&quot;&gt;Cadence VoltageStorm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Apache RedHawk, we can do static as well as dynamic IR drop analysis. Also, we can analyze the power grid of the design and find out weaknesses such as shorts, opens, missing vias, high resistance path to an instance etc., before performing actual IR drop analysis.&lt;/p&gt;

&lt;p&gt;After completing IR drop analysis for a design in RedHawk, we can review and analyze different types of maps such as Average IR drop map, Frequency map, Load capacitance map etc., and reports dumped by RedHawk to check for potential issues in the design.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this tutorial, we looked at saving power from a physical design perspective. We understood the different types of power dissipation in a CMOS based circuit design, understood what is IR drop at physical level, why IR drop occur in silicon, what are some techniques to reduce IR drop and tools available to analyze IR drop at physical design stage.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=TFOO1JAll2Y&quot; target=&quot;_blank&quot;&gt;Low Power VLSI Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://semiengineering.com/knowledge_centers/low-power/low-power-design/power-consumption/&quot; target=&quot;_blank&quot;&gt;Power Consumption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vlsi-basics.com/2013/10/ir-drop-analysis-using-redhawk-overview.html&quot; target=&quot;_blank&quot;&gt;IR Drop Analysis using RedHawk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.edn.com/design/systems-design/4419930/An-efficient-RDL-routing-for-flip-chip-designs&quot; target=&quot;_blank&quot;&gt;An efficient RDL routing for flip-chip designs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.design-reuse.com/articles/31011/power-grid-design.html&quot; target=&quot;_blank&quot;&gt;Novel and efficient power grid design for lesser metal layer process SOC’s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vlsi-basics.com/2013/12/ir-drop-analysis-interview-questions.html&quot; target=&quot;_blank&quot;&gt;IR Drop Analysis Interview Questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SvZOq2B3-pg&quot; target=&quot;_blank&quot;&gt;Minimizing Leakage Power - I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lnDjc_4UB6M&quot; target=&quot;_blank&quot;&gt;Minimizing Leakage Power - II&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://asic-soc.blogspot.com/2008/03/leakage-power-trends.html&quot; target=&quot;_blank&quot;&gt;Leakage Power Trends&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gogul Ilango</name></author><category term="hardware" /><summary type="html">X Contents Power Dissipation Types of Power Dissipation Dynamic Power Switching Power Short-circuit Power Static Power What is IR drop? Types of IR drop analysis Reasons for high IR drop Tools for IR drop analysis References Power &amp;amp; Battery life have become very important factors be to considered during chip design as technology node shrinks. For a VLSI Design Engineer, knowledge on power consumption in a CMOS design is crucial as it has become a very big challenge in latest technology nodes. Almost any electronic device that you hold in your hand (smartphone, tablet, notebook, laptop etc.,) consume power from a limited power supply (battery). Thus, making the chip consume less power is a mandatory problem to be solved. Objectives After reading this tutorial, we will understand Why power is important in VLSI design? What are the different types of power dissipation? What are switching power, short-circuit power and leakage power? What is IR drop &amp;amp; different types of IR drop? What are the reasons for high IR drop? What are the tools available to analyse IR drop? What are some strategies to reduce power dissipation? Power Dissipation The process in which a chip produces heat (waste energy) as an unwanted byproduct of its primary action is termed as Power Dissipation. If the chip dissipates power than its maximum limit, it could lead to functionality failure or even burn out. Hence, reducing power dissipation is a necessity in modern semiconductor design due to lower technology nodes, higher frequencies, complex functionalities and portability. When dealing with power, we need to take care of modeling our circuits during both logic design phase as well as physical design phase. During logic design, industries follow something called as UPF (Unified Power Format) to introduce power reduction strategies along with RTL code. We will discuss more about this in future posts. During physical design, we build the entire power distribution network in silicon that’s made up of metal layer stack which we will discuss as we proceed in this tutorial. But wait! Let me show you how it looks when we analyze IR drop in power analysis tools such as Apache RedHawk 🙄 [source: Apache RedHawk NX] The above image shows the standard IR drop map of a design in Apache RedHawk. A design engineer’s job is to reduce all those regions in red so that power number is within limits. Before diving into how do we reduce power dissipation during physical design phase, we need to understand some basic concepts of power. Types of Power Dissipation In a low-power CMOS VLSI design, there are two types of power dissipation. Static power Dynamic power The sources of these power dissipations as well as the techniques to solve them are different. These two types of power dissipation are further classified as shown in Figure 1. Figure 1. Types of Power Dissipation in CMOS Dynamic Power As the name suggests, dynamic power dissipation occurs when the transistors are switching from one logic state to another. There are two types of dynamic power dissipation in CMOS circuits namely Switching Power Short-circuit Power Figure 2. Types of Dynamic Power Switching Power When a transistor switch from one logic state to another, the load capacitance at the output pin needs to be charged or discharged which is referred as the switching power as shown in Figure 2. When the output rises, the load capacitance must go from \( V_{SS} \) to \( V_{DD} \). When the output falls, the load capacitance must go from \( V_{DD} \) to \( V_{SS} \). Recall that in basic electronic theory, there is a switching current associated on charging or discharging the capacitor which is given as \( i = C \frac{dV_{DD}}{dt}\), which further gets multiplied by \( V_{DD} \) to produce power. Similarly in CMOS, the average dynamic power (\(P_{dynamic}\)) is given by $$ \begin{align} P_{dynamic} &amp;amp; = \frac{1}{T} \int_0^T i_{DD}(t) V_{DD} dt \\ &amp;amp; = \frac{V_{DD}}{T} \int_0^T i_{DD}(t) dt \\ &amp;amp; = \frac{V_{DD}}{T} [T f_{sw} C V_{DD}] \\ &amp;amp; = C V_{DD}^2 f_{sw} \end{align} $$ where \( f_{sw} \) - frequency of output switching \( C \) - load capacitance \( V_{DD} \) - power supply voltage Switching factor (\( \alpha \)) To measure how frequently the output pin of a transistor circuit switches, we define a parameter called switching factor or toggle factor (\( \alpha \)). If the frequency of output switching is \(f_{sw}\), then the charging and discharging cycle will repeat \(T * f_{sw}\) times over a time interval \( T \). If \( f \) is the clock frequency at which the chip operates, then \( f_{sw} = \alpha * f \). \( \alpha = 1 \) - if the output pin of a transistor switches with the clock frequency. \( \alpha = \frac{1}{2} \) - if the output pin of a transistor switches once per cycle of the clock frequency. If we include this switching factor \( \alpha \) for dynamic power calculation, we get $$ \begin{align} P_{dynamic} &amp;amp; = \alpha C V_{DD}^2 f \end{align} $$ Thus, we can reduce dynamic power by Reducing the switching factor \( \alpha \) of the transistor. Reducing the load capacitance \( C \) of the transistor. Reducing the supply voltage \( V_{DD} \) of the transistor. Reducing the clock frequency \( f \) of the transistor. From an physical design implementation perspective, \( C \) comes from .spef file of the design. \( V_{DD} \) comes from the chosen corner of the design. \( \alpha \) comes from either .fsdb file or .gsc file of the design. \( f \) comes from timing session of the design. Short-circuit Power When a transistor switch from one logic state to another, during the signal transition, there exist a direct path from \( V_{DD} \) to \( V_{SS} \) which produces short-circuit current \( I_{SC} \) and short-circuit power dissipation. If clock frequency of the design increases, frequency of transition will increase which further increases short circuit power. Mathematically, short circuit \( P_{short-circuit} \) power can be written as $$ \begin{align} P_{short-circuit} &amp;amp; = I_{SC} * V_{DD} * f_{sw} \end{align} $$ where \( I_{SC} \) - short circuit current during signal transition \( V_{DD} \) - power supply voltage \( f_{sw} \) - switching frequency Static Power As the name suggests, even when the chip is off or quiescent (static), there exists some amount of power dissipation due to transistor’s leakage characteristics giving rise to leakage power. This is due to the characteristic of CMOS transistors itself, which is a function of power supply voltage \( V_{DD} \), threshold voltage \( V_{th} \) and transistor’s dimension (width \(W \) and length \( L \)). Figure 3. Static or Leakage Power Dissipation As we scale down the technology node, leakage power is becoming a significant contributor in IR drop analysis. Leakage power can further be classified into three types. Diode leakage Sub-threshold leakage Gate-oxide leakage $$ \begin{align} P_{leakage}(V_{DD}, V_{th}, W, L) \end{align} $$ From a PD implementation perspective, .lib files of a standard cell contains leakage power related information which is further given to power analysis tools such as Apache RedHawk for power verification. You can read more on leakage power here. What is IR drop? In an ASIC, power to different blocks, IO pads, standard cells and macros are provided by the power grid which consists of stack of metal layers (conductors) that run horizontally and vertically in a grid-like fashion over the entire floorplan. These stacked metal layers have power stripes such as \( V_{DD} \) and \( V_{SS} \) at regular intervals (pitch) with defined width and thickness, and are connected through vias from one layer to another as shown in Figure 4. This power distribution grid (or network) comprises of power rings, power stripes and power rails that are resistive by nature which creates the IR drop (or voltage drop). Figure 4. Metal layer stack (2D &amp;amp; 3D view) Currently, there are two approaches followed in industry to redistribute power from package to core namely Wire Bonding and Flip-Chip as shown in Figure 5. Figure 5. Wire-bonding and Flip-chip techniques In flip-chip designs, as power supply voltage gets redistributed from the IO pads to bump pads (containing C4 bump arrays) via top-layer (or Redistribution Layer or AP layer), different blocks, standard cells and macros receive power after crossing different metal layers from top to bottom till it reaches the layer in which power pins of the instances reside. When power supply voltage travels from top-layer (RDL layer) to power pins layer of instances (usually lower layer), there exists drop in the voltage levels due to the resistive nature of these metal layers. As there is resistance in these metal wires, when a voltage is applied, current is produced which further decreases the voltage level reaching the instances which is termed as the IR drop or Voltage drop. In addition to the voltage drop that is present in the metal layers stack (on-die), there is also some voltage drop called \( \frac{di}{dt} \) drop (off-die) associated with the package leads which has inductance (and less resistance) associated with it due to the time-varying current. Furthermore, the presence of decoupling capacitors near the instances that store charges locally (which might assist in decreasing voltage drop), adds up some load capacitance. This addition of decaps increases leakage power consumption as well as area which further gets added to the equation. Thus, we can summarize that the voltage level seen at an instance in the design as $$ \begin{align} V_{instance} = V_{powersupply} - (drop_{metalstack} + drop_{packageleads} + drop_{decaps}) \end{align} $$ From an implementation perspective, if \( V_{powersupply} = 2V \) \( drop_{metalstack} = 0.2V\) \( drop_{packageleads} = 0.1V \) \( drop_{decaps} = 0.1V \) then, \( V_{instance} = 1.6V \). Any instance in the design will have a maximum voltage drop limit above which it may fail in functionality or timing. So, it’s the job of the engineer to reduce IR drop in the design before tapeout. Types of IR drop analysis There are two standard types of IR drop analysis for a circuit design namely Static IR drop - Vectorless IR drop analysis with average current cycles. Typically used for Electro-Migration (EM) analysis where current limit is checked for wires. Dynamic IR drop - Vectorless or VCD based IR drop analysis with worst-case switching currents. Typically used to check voltage drop limit for switching instances. Static IR Drop Dynamic IR Drop All cell instances will draw average current (DC). All switching instances will draw transient current (AC). All non-switching instances will draw only leakage current. Total Average demand will be much lesser than real peak demand current for the design. Real peak demand current is measured and analyzed in dynamic IR. Total demand current is supplied from the power source (battery). Total demand current is supplied from the power source (battery) and some portion of the demand current is supplied by decoupling capacitors near the cell instances. All cell instances will draw current all the time. Hence, switching effects are not considered. Switching effects are always considered. All instances draw transient current only during switching. Simultaneous switching causes huge peak demand current. If package is considered, there is no IR drop due to Ldi/dt effects as current is constant. If package is considered, Ldi/dt effects are considered. Reasons for high IR drop Some of the standard reasons for high IR drop in a design are High power grid resistance. High current flowing through the power grid. Simultaneous switching of instances at same time. Less amount of decoupling capacitors near the instances. High parasitics in package leads. Lesser length or width of power stripes in RDL layer. Lesser power sources such as power bumps (in flip-chip). Incorrect input files (to power analysis tools) such as .lef, .def, .lib, .spef, .sta, .ploc or APL files. Tools for IR drop analysis There are different tools available to perform IR drop analysis for a design from physical design perspective. Some of the industry standard tools are Apache RedHawk and Cadence VoltageStorm. In Apache RedHawk, we can do static as well as dynamic IR drop analysis. Also, we can analyze the power grid of the design and find out weaknesses such as shorts, opens, missing vias, high resistance path to an instance etc., before performing actual IR drop analysis. After completing IR drop analysis for a design in RedHawk, we can review and analyze different types of maps such as Average IR drop map, Frequency map, Load capacitance map etc., and reports dumped by RedHawk to check for potential issues in the design. Conclusion In this tutorial, we looked at saving power from a physical design perspective. We understood the different types of power dissipation in a CMOS based circuit design, understood what is IR drop at physical level, why IR drop occur in silicon, what are some techniques to reduce IR drop and tools available to analyze IR drop at physical design stage. References Low Power VLSI Design Power Consumption IR Drop Analysis using RedHawk An efficient RDL routing for flip-chip designs Novel and efficient power grid design for lesser metal layer process SOC’s IR Drop Analysis Interview Questions Minimizing Leakage Power - I Minimizing Leakage Power - II Leakage Power Trends</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1xyGDoXG5-zywLrc3yOrrnCI02FFD7DxW" /></entry></feed>